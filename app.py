# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
from flask import Flask, jsonify, request, send_from_directory, send_file
from flask_cors import CORS
import json
import uuid
import csv
import os
from io import StringIO
import random
import hashlib
import datetime
from threading import Thread
import telebot
from telebot import types
import logging
import sys
import time
from collections import defaultdict, Counter
import re
import requests
import zipfile
import shutil

# -----------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -----------------
app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.INFO)

# --- –ù–∞–∑–≤–∏ —Ñ–∞–π–ª—ñ–≤ ---
DATA_FILE = 'data.json'
CLIENTS_FILE = 'clients.json'
CHATBOT_KNOWLEDGE_FILE = 'chatbot_knowledge.json'
PAYMENTS_FILE = 'pay.json'
# –ù–æ–≤—ñ —Ñ–∞–π–ª–∏ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
SUPPORT_TICKETS_FILE = 'support_tickets.json'
USERS_FILE = 'users.json'
SYSTEM_LOG_FILE = 'system_log.json'
BACKUP_DIR = 'backups'

# --- Telegram Bot ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8304901511:AAFmmhpw0qwtLq14NeOpM5LVEgkQIZcZGvk")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "1251880919")
ADMIN_IDS = [int(TELEGRAM_CHAT_ID)] if TELEGRAM_CHAT_ID.isdigit() else []

if TELEGRAM_BOT_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN" or not ADMIN_IDS:
    logging.warning("–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –∞–±–æ ID —á–∞—Ç—É –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –§—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞ –±—É–¥—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
    bot = None
else:
    bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, parse_mode="HTML")

# --- –ü–û–ß–ê–¢–û–ö –ë–õ–û–ö–£ –õ–û–ö–ê–õ–Ü–ó–ê–¶–Ü–á ---
LANGUAGES = {
    'uk': {
        "welcome": "üëã –í—ñ—Ç–∞—é —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ!\n–î–ª—è –ø–æ—á–∞—Ç–∫—É, –¥–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ—Å—å. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
        "welcome_back": "–í—ñ—Ç–∞—é, {name}! üëã",
        "register_phone": "–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        "register_success": "–î—è–∫—É—é, {name}! –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –º–∞–≥–∞–∑–∏–Ω—É.",
        "main_menu": "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        "btn_catalog": "üõç –ö–∞—Ç–∞–ª–æ–≥",
        "btn_purchases": "üîë –ú–æ—ó –ø–æ–∫—É–ø–∫–∏",
        "btn_profile": "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å",
        "btn_reviews": "‚úçÔ∏è –í—ñ–¥–≥—É–∫–∏",
        "btn_promotions": "üì¢ –ê–∫—Ü—ñ—ó",
        "btn_support": "üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞",
        "btn_about": "‚ÑπÔ∏è –ü—Ä–æ –º–∞–≥–∞–∑–∏–Ω",
        "btn_settings": "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        "btn_wishlist": "‚ù§Ô∏è –£–ª—é–±–ª–µ–Ω–µ",
        "btn_bundles": "üéÅ –ö–æ–ª–µ–∫—Ü—ñ—ó",
        "btn_news": "üì∞ –ù–æ–≤–∏–Ω–∏",
        "btn_invite": "ü§ù –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞",
        "btn_cart": "üõí –ö–æ—à–∏–∫",
        "btn_deal_of_the_day": "üî• –¢–æ–≤–∞—Ä –¥–Ω—è",
        "settings_menu": "<b>‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:",
        "btn_change_name": "–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ",
        "btn_change_phone": "–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
        "btn_language": "üåê –ú–æ–≤–∞",
        "language_menu": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        "lang_set_success": "‚úÖ –ú–æ–≤—É —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!",
        "ask_new_name": "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
        "ask_new_phone": "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        "name_changed": "‚úÖ –í–∞—à–µ —ñ–º'—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!",
        "phone_changed": "‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!",
        "catalog_title": "üóÇÔ∏è <b>–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:</b>",
        "all_products": "–í—Å—ñ —Ç–æ–≤–∞—Ä–∏",
        "category_products": "<b>–¢–æ–≤–∞—Ä–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ¬´{category_name}¬ª (—Å—Ç–æ—Ä. {page}):</b>",
        "all_products_paginated": "<b>–í–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ (—Å—Ç–æ—Ä. {page}):</b>",
        "no_products_in_category": "\n\n–ù–∞ –∂–∞–ª—å, —Ç—É—Ç —â–µ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.",
        "btn_to_categories": "‚§¥Ô∏è –î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
        "btn_prev_page": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "btn_next_page": "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
        "wishlist_title": "<b>‚ù§Ô∏è –í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏:</b>",
        "wishlist_empty": "–í–∞—à —Å–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–æ–≥–æ –ø–æ—Ä–æ–∂–Ω—ñ–π. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –∫–∞—Ç–∞–ª–æ–≥—É.",
        "added_to_wishlist": "‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ —É–ª—é–±–ª–µ–Ω–æ–≥–æ!",
        "removed_from_wishlist": "üíî –í–∏–¥–∞–ª–µ–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–æ–≥–æ.",
        "btn_add_to_wishlist": "‚ù§Ô∏è –î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω–µ",
        "btn_remove_from_wishlist": "üíî –í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–æ–≥–æ",
        "bundles_title": "<b>üéÅ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó:</b>",
        "bundles_empty": "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–ª–µ–∫—Ü—ñ–π.",
        "bundle_details": "<b>–ö–æ–ª–µ–∫—Ü—ñ—è ¬´{name}¬ª</b>\n\n{description}\n\n<b>–°–∫–ª–∞–¥:</b>\n{products}\n\n<s>–ó–∞–≥–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: {total_price} –≥—Ä–Ω</s>\n<b>–¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {discount_price} –≥—Ä–Ω!</b>",
        "buy_bundle": "–ö—É–ø–∏—Ç–∏ –∫–æ–ª–µ–∫—Ü—ñ—é –∑–∞ {price} –≥—Ä–Ω",
        "bundle_purchase_success": "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–ª–∏ –∫–æ–ª–µ–∫—Ü—ñ—é ¬´{name}¬ª!\n\n–û—Å—å –≤–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:",
        "news_title": "<b>üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏</b>\n\n",
        "no_news": "–ù–∞—Ä–∞–∑—ñ –Ω–æ–≤–∏–Ω –Ω–µ–º–∞—î.",
        "referral_text": "<b>ü§ù –í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:</b>\n\n–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –∑ –¥—Ä—É–∑—è–º–∏. –ö–æ–ª–∏ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î—Ç—å—Å—è –∑–∞ –Ω–∏–º, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ <b>{bonus} Delon-–≥—ñ–∫—ñ–≤</b> –Ω–∞ —Å–≤—ñ–π –±–æ–Ω—É—Å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫!\n\n<code>{link}</code>",
        "referral_welcome": "\n\nüéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º —ñ –≤–∞—à –¥—Ä—É–≥ –æ—Ç—Ä–∏–º–∞–≤ –±–æ–Ω—É—Å!",
        "user_banned": "–í–∏–±–∞—á—Ç–µ, –≤–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
        "btn_end_chat": "üí¨ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥",
        "support_start": "–í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º –ø—ñ–¥—Ç—Ä–∏–º–∫–∏. –£—Å—ñ –≤–∞—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤–∏–π—Ç–∏.",
        "support_end": "–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏. –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–µ.",
        "ask_use_bonus": "–£ –≤–∞—Å —î {points} Delon-–≥—ñ–∫—ñ–≤. –•–æ—á–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ó—Ö –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–∫–∏?",
        "btn_yes": "–¢–∞–∫",
        "btn_no": "–ù—ñ",
        "bonus_applied": "‚úÖ –ë–æ–Ω—É—Å–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ! –ù–æ–≤–∞ —Å—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {new_price} –≥—Ä–Ω. –ó–∞–ª–∏—à–æ–∫ –±–æ–Ω—É—Å—ñ–≤: {remaining_points}.",
        "cart_title": "üõí <b>–í–∞—à –∫–æ—à–∏–∫</b>",
        "cart_empty": "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.",
        "added_to_cart": "‚úÖ –î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫!",
        "btn_clear_cart": "üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫",
        "btn_checkout": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        "total_price": "<b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</b>",
        "btn_add_to_cart": "‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫",
        "btn_buy_now": "‚ö°Ô∏è –ö—É–ø–∏—Ç–∏ –∑–∞—Ä–∞–∑",
        "wishlist_notification": "üîî <b>–ì–∞—Ä–Ω—ñ –Ω–æ–≤–∏–Ω–∏!</b>\n–¢–æ–≤–∞—Ä –∑ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω—å <b>¬´{product_name}¬ª</b> —Ç–µ–ø–µ—Ä –∑—ñ –∑–Ω–∏–∂–∫–æ—é! üî•",
        "deal_of_the_day_title": "üî• <b>–¢–æ–≤–∞—Ä –¥–Ω—è!</b> üî•\n\n–¢—ñ–ª—å–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è:",
        "no_deal_of_the_day": "–ù–∞ –∂–∞–ª—å, —Å—å–æ–≥–æ–¥–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –Ω–µ–º–∞—î. –ó–∞–≤—ñ—Ç–∞–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!",
        "profile_rank": "<b>–†–∞–Ω–≥:</b> {rank_name} ({bonus_percent}%)",
        "rank_up_notification": "üéâ <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n–í–∏ –¥–æ—Å—è–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–Ω–≥—É: <b>{rank_name}</b>! –¢–µ–ø–µ—Ä –≤–∞—à –∫–µ—à–±–µ–∫ –∑ –ø–æ–∫—É–ø–æ–∫ —Å–∫–ª–∞–¥–∞—î <b>{bonus_percent}%</b>. –î—è–∫—É—î–º–æ, —â–æ –≤–∏ –∑ –Ω–∞–º–∏!",
        "personal_promocode_notification": "üéÅ <b>–û—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –¥–ª—è –≤–∞—Å!</b>\n\n–ú–∏ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∏ –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –∑–Ω–∏–∂–∫—É <b>{discount}%</b>:\n\n<code>{code}</code>\n\n–í—ñ–Ω –¥—ñ–π—Å–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è. –í–¥–∞–ª–æ—ó –ø–æ–∫—É–ø–∫–∏!"
    },
    'ru': {
        # ... (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è —ñ–Ω—à–∏—Ö –º–æ–≤)
    },
    'en': {
        # ... (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è —ñ–Ω—à–∏—Ö –º–æ–≤)
    }
}

def get_text(key, user_id):
    """–û—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞ –º–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_id = str(user_id)
    lang = clients_db.get(user_id, {}).get('lang', 'uk')
    return LANGUAGES.get(lang, LANGUAGES['uk']).get(key, f"_{key}_")

# --- –ö–Ü–ù–ï–¶–¨ –ë–õ–û–ö–£ –õ–û–ö–ê–õ–Ü–ó–ê–¶–Ü–á ---

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ ---
def load_json_file(filename, default_value=[]):
    if not os.path.exists(filename) or os.path.getsize(filename) == 0:
        return default_value
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return default_value

def save_json_file(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def load_clients():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ JSON-—Ñ–∞–π–ª—É –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π."""
    return load_json_file(CLIENTS_FILE, {})

def save_clients(clients_data):
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –≤ JSON-—Ñ–∞–π–ª."""
    save_json_file(CLIENTS_FILE, clients_data)

def load_data():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ JSON-—Ñ–∞–π–ª—É –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π, —è–∫—â–æ –≤—ñ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π."""
    if not os.path.exists(DATA_FILE) or os.path.getsize(DATA_FILE) == 0:
        logging.warning(f"–§–∞–π–ª {DATA_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π. –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.")
        default_data = {
            "products": [], "users": [], "orders": [], "discounts": [], "reviews": [],
            "categories": [], "bundles": [], "news": [], "promocodes": [],
            "bonus_settings": {"referral_bonus": 20, "purchase_bonus_percent": 5},
            "shop_info": {"name": "DelongikShop", "description": "–ù–∞–π–∫—Ä–∞—â—ñ —Ç–æ–≤–∞—Ä–∏ —Ç—É—Ç."},
            "loyalty_levels": [
                {"name": "Bronze", "threshold": 0, "bonus_percent": 5},
                {"name": "Silver", "threshold": 5000, "bonus_percent": 7},
                {"name": "Gold", "threshold": 15000, "bonus_percent": 10}
            ],
            "deal_of_the_day": {}
        }
        save_data(default_data)
        return default_data
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–ª—é—á—ñ, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
            for key in ["products", "users", "orders", "discounts", "reviews", "shop_info", "categories", "bundles", "news", "promocodes", "bonus_settings", "loyalty_levels", "deal_of_the_day"]:
                if key not in data:
                    if key == "shop_info" or key == "deal_of_the_day": data[key] = {}
                    elif key == "bonus_settings": data[key] = {"referral_bonus": 20, "purchase_bonus_percent": 5}
                    elif key == "loyalty_levels": data[key] = [
                        {"name": "Bronze", "threshold": 0, "bonus_percent": 5},
                        {"name": "Silver", "threshold": 5000, "bonus_percent": 7},
                        {"name": "Gold", "threshold": 15000, "bonus_percent": 10}
                    ]
                    else: data[key] = []
            logging.info(f"–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ {DATA_FILE}.")
            return data
    except (json.JSONDecodeError, FileNotFoundError):
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {DATA_FILE}. –§–∞–π–ª –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ.")
        sys.exit(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª –¥–∞–Ω–∏—Ö {DATA_FILE}.")

def save_data(data):
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –≤ JSON-—Ñ–∞–π–ª."""
    save_json_file(DATA_FILE, data)

def load_chatbot_knowledge():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –±–∞–∑—É –∑–Ω–∞–Ω—å —á–∞—Ç-–±–æ—Ç–∞ –∑ —Ñ–∞–π–ª—É –∞–±–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –Ω–æ–≤—É."""
    return load_json_file(CHATBOT_KNOWLEDGE_FILE, [])

def save_chatbot_knowledge(knowledge):
    """–ó–±–µ—Ä—ñ–≥–∞—î –±–∞–∑—É –∑–Ω–∞–Ω—å —á–∞—Ç-–±–æ—Ç–∞ –≤ —Ñ–∞–π–ª."""
    save_json_file(CHATBOT_KNOWLEDGE_FILE, knowledge)

def load_payment_details():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–ª–∞—Ç—ñ–∂–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏."""
    return load_json_file(PAYMENTS_FILE, {})

def save_payment_details(details):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–ª–∞—Ç—ñ–∂–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏."""
    save_json_file(PAYMENTS_FILE, details)

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö ---
db = load_data()
clients_db = load_clients()
chatbot_knowledge = load_chatbot_knowledge()
payment_details = load_payment_details()
support_tickets = load_json_file(SUPPORT_TICKETS_FILE, [])
panel_users = load_json_file(USERS_FILE, [])
system_logs = load_json_file(SYSTEM_LOG_FILE, [])

# --- –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π ---
def log_action(action, details):
    global system_logs
    log_entry = {
        "timestamp": datetime.datetime.now().isoformat(),
        "action": action,
        "details": details
    }
    system_logs.insert(0, log_entry)
    system_logs = system_logs[:200]
    save_json_file(SYSTEM_LOG_FILE, system_logs)

# --- –Ü–Ω—à—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
REGIONS = {
    "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º": ["–°—ñ–º—Ñ–µ—Ä–æ–ø–æ–ª—å", "–ö–µ—Ä—á", "–Ñ–≤–ø–∞—Ç–æ—Ä—ñ—è", "–Ø–ª—Ç–∞", "–§–µ–æ–¥–æ—Å—ñ—è", "–î–∂–∞–Ω–∫–æ–π"],
    "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–í—ñ–Ω–Ω–∏—Ü—è", "–ñ–º–µ—Ä–∏–Ω–∫–∞", "–ú–æ–≥–∏–ª—ñ–≤-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π", "–ö–æ–∑—è—Ç–∏–Ω", "–•–º—ñ–ª—å–Ω–∏–∫", "–õ–∞–¥–∏–∂–∏–Ω"],
    "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–õ—É—Ü—å–∫", "–ö–æ–≤–µ–ª—å", "–ù–æ–≤–æ–≤–æ–ª–∏–Ω—Å—å–∫", "–í–æ–ª–æ–¥–∏–º–∏—Ä", "–ö–∞–º—ñ–Ω—å-–ö–∞—à–∏—Ä—Å—å–∫–∏–π", "–ö—ñ–≤–µ—Ä—Ü—ñ"],
    "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–î–Ω—ñ–ø—Ä–æ", "–ö—Ä–∏–≤–∏–π –†—ñ–≥", "–ö–∞–º'—è–Ω—Å—å–∫–µ", "–ù—ñ–∫–æ–ø–æ–ª—å", "–ü–∞–≤–ª–æ–≥—Ä–∞–¥", "–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å—å–∫"],
    "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–ö—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫", "–ú–∞—Ä—ñ—É–ø–æ–ª—å", "–°–ª–æ–≤'—è–Ω—Å—å–∫", "–ü–æ–∫—Ä–æ–≤—Å—å–∫", "–ö–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤–∫–∞", "–ë–∞—Ö–º—É—Ç"],
    "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–ñ–∏—Ç–æ–º–∏—Ä", "–ë–µ—Ä–¥–∏—á—ñ–≤", "–ö–æ—Ä–æ—Å—Ç–µ–Ω—å", "–ù–æ–≤–æ–≥—Ä–∞–¥-–í–æ–ª–∏–Ω—Å—å–∫–∏–π", "–ú–∞–ª–∏–Ω", "–ö–æ—Ä–æ—Å—Ç–∏—à—ñ–≤"],
    "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–£–∂–≥–æ—Ä–æ–¥", "–ú—É–∫–∞—á–µ–≤–æ", "–•—É—Å—Ç", "–í–∏–Ω–æ–≥—Ä–∞–¥—ñ–≤", "–ë–µ—Ä–µ–≥–æ–≤–µ", "–°–≤–∞–ª—è–≤–∞"],
    "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–ó–∞–ø–æ—Ä—ñ–∂–∂—è", "–ú–µ–ª—ñ—Ç–æ–ø–æ–ª—å", "–ë–µ—Ä–¥—è–Ω—Å—å–∫", "–ï–Ω–µ—Ä–≥–æ–¥–∞—Ä", "–¢–æ–∫–º–∞–∫", "–ü–æ–ª–æ–≥–∏"],
    "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫", "–ö–∞–ª—É—à", "–ö–æ–ª–æ–º–∏—è", "–ù–∞–¥–≤—ñ—Ä–Ω–∞", "–î–æ–ª–∏–Ω–∞", "–ë—É—Ä—à—Ç–∏–Ω"],
    "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–ö–∏—ó–≤", "–ë—ñ–ª–∞ –¶–µ—Ä–∫–≤–∞", "–ë—Ä–æ–≤–∞—Ä–∏", "–ë–æ—Ä–∏—Å–ø—ñ–ª—å", "–§–∞—Å—Ç—ñ–≤", "–Ü—Ä–ø—ñ–Ω—å", "–í–∏—à–≥–æ—Ä–æ–¥"],
    "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π", "–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ—è", "–°–≤—ñ—Ç–ª–æ–≤–æ–¥—Å—å–∫", "–ó–Ω–∞–º'—è–Ω–∫–∞", "–î–æ–ª–∏–Ω—Å—å–∫–∞", "–ù–æ–≤–æ—É–∫—Ä–∞—ó–Ω–∫–∞"],
    "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–°—î–≤—î—Ä–æ–¥–æ–Ω–µ—Ü—å–∫", "–õ–∏—Å–∏—á–∞–Ω—Å—å–∫", "–ê–ª—á–µ–≤—Å—å–∫", "–•—Ä—É—Å—Ç–∞–ª—å–Ω–∏–π", "–°—Ç–∞—Ä–æ–±—ñ–ª—å—Å—å–∫", "–†—É–±—ñ–∂–Ω–µ"],
    "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–õ—å–≤—ñ–≤", "–î—Ä–æ–≥–æ–±–∏—á", "–ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∞–¥", "–°—Ç—Ä–∏–π", "–°–∞–º–±—ñ—Ä", "–ë–æ—Ä–∏—Å–ª–∞–≤"],
    "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–ú–∏–∫–æ–ª–∞—ó–≤", "–ü–µ—Ä–≤–æ–º–∞–π—Å—å–∫", "–Æ–∂–Ω–æ—É–∫—Ä–∞—ó–Ω—Å—å–∫", "–í–æ–∑–Ω–µ—Å–µ–Ω—Å—å–∫", "–ù–æ–≤–∏–π –ë—É–≥", "–û—á–∞–∫—ñ–≤"],
    "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–û–¥–µ—Å–∞", "–ß–æ—Ä–Ω–æ–º–æ—Ä—Å—å–∫", "–Ü–∑–º–∞—ó–ª", "–ü–æ–¥—ñ–ª—å—Å—å–∫", "–ë—ñ–ª–≥–æ—Ä–æ–¥-–î–Ω—ñ—Å—Ç—Ä–æ–≤—Å—å–∫–∏–π", "–Æ–∂–Ω–µ"],
    "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–ü–æ–ª—Ç–∞–≤–∞", "–ö—Ä–µ–º–µ–Ω—á—É–∫", "–ì–æ—Ä—ñ—à–Ω—ñ –ü–ª–∞–≤–Ω—ñ", "–õ—É–±–Ω–∏", "–ú–∏—Ä–≥–æ—Ä–æ–¥", "–ì–∞–¥—è—á"],
    "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–†—ñ–≤–Ω–µ", "–í–∞—Ä–∞—à", "–î—É–±–Ω–æ", "–°–∞—Ä–Ω–∏", "–ö–æ—Å—Ç–æ–ø—ñ–ª—å", "–ë–µ—Ä–µ–∑–Ω–µ"],
    "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–°—É–º–∏", "–ö–æ–Ω–æ—Ç–æ–ø", "–®–æ—Å—Ç–∫–∞", "–û—Ö—Ç–∏—Ä–∫–∞", "–†–æ–º–Ω–∏", "–ì–ª—É—Ö—ñ–≤"],
    "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–¢–µ—Ä–Ω–æ–ø—ñ–ª—å", "–ß–æ—Ä—Ç–∫—ñ–≤", "–ö—Ä–µ–º–µ–Ω–µ—Ü—å", "–ë–µ—Ä–µ–∂–∞–Ω–∏", "–ó–∞–ª—ñ—â–∏–∫–∏", "–ú–æ–Ω–∞—Å—Ç–∏—Ä–∏—Å—å–∫–∞"],
    "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–•–∞—Ä–∫—ñ–≤", "–Ü–∑—é–º", "–õ–æ–∑–æ–≤–∞", "–ö—É–ø'—è–Ω—Å—å–∫", "–ß—É–≥—É—ó–≤", "–ü–µ—Ä–≤–æ–º–∞–π—Å—å–∫–∏–π"],
    "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–•–µ—Ä—Å–æ–Ω", "–ù–æ–≤–∞ –ö–∞—Ö–æ–≤–∫–∞", "–ö–∞—Ö–æ–≤–∫–∞", "–ì–µ–Ω—ñ—á–µ—Å—å–∫", "–°–∫–∞–¥–æ–≤—Å—å–∫", "–û–ª–µ—à–∫–∏"],
    "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π", "–ö–∞–º'—è–Ω–µ—Ü—å-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π", "–®–µ–ø–µ—Ç—ñ–∫–∞", "–ù–µ—Ç—ñ—à–∏–Ω", "–°–ª–∞–≤—É—Ç–∞"],
    "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–ß–µ—Ä–∫–∞—Å–∏", "–£–º–∞–Ω—å", "–°–º—ñ–ª–∞", "–ó–æ–ª–æ—Ç–æ–Ω–æ—à–∞", "–ö–∞–Ω—ñ–≤", "–ö–æ—Ä—Å—É–Ω—å-–®–µ–≤—á–µ–Ω–∫—ñ–≤—Å—å–∫–∏–π"],
    "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–ß–µ—Ä–Ω—ñ–≤—Ü—ñ", "–°—Ç–æ—Ä–æ–∂–∏–Ω–µ—Ü—å", "–ù–æ–≤–æ—Å–µ–ª–∏—Ü—è", "–•–æ—Ç–∏–Ω", "–ó–∞—Å—Ç–∞–≤–Ω–∞"],
    "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": ["–ß–µ—Ä–Ω—ñ–≥—ñ–≤", "–ù—ñ–∂–∏–Ω", "–ü—Ä–∏–ª—É–∫–∏", "–ë–∞—Ö–º–∞—á", "–ö–æ—Ä—é–∫—ñ–≤–∫–∞", "–ú–µ–Ω–∞"],
    "–ú—ñ—Å—Ç–æ –ö–∏—ó–≤": ["–ö–∏—ó–≤"]
}
ORDER_STATE = {}

def strip_html_tags(text):
    clean = re.compile('<.*?>')
    return re.sub(clean, '', text)

def get_product_by_id(product_id):
    return next((p for p in db['products'] if p.get('id') == product_id), None)

def apply_discounts(products, discounts):
    products_copy = [p.copy() for p in products]
    for product in products_copy:
        product['discount_percent'] = 0
        product['discounted_price'] = product['price']
        for discount in discounts:
            if discount['target'] == 'all' or (discount['target'] == 'specific' and product.get('id') in discount.get('product_ids', [])):
                discount_percent = discount['percentage']
                product['discount_percent'] = discount_percent
                product['discounted_price'] = round(product['price'] * (1 - discount_percent / 100))
    return products_copy

def cleanup_old_news():
    global db
    if 'news' not in db or not db['news']:
        return
    seven_days_ago = datetime.datetime.now() - datetime.timedelta(days=7)
    valid_news = [item for item in db['news'] if 'date' in item and item['date'] and datetime.datetime.fromisoformat(item['date']) > seven_days_ago]
    if len(valid_news) < len(db['news']):
        logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ {len(db['news']) - len(valid_news)} —Å—Ç–∞—Ä–∏—Ö –Ω–æ–≤–∏–Ω.")
        db['news'] = valid_news
        save_data(db)

cleanup_old_news()

def send_admin_notification(message_text):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    if not bot:
        logging.warning("–°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –∞–ª–µ –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        return
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, message_text, parse_mode="HTML")
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

def notify_users_about_discount(discount):
    """–°–ø–æ–≤—ñ—â–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–æ –Ω–æ–≤—É –∑–Ω–∏–∂–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä–∏ –∑ —ó—Ö–Ω—å–æ–≥–æ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω—å."""
    if discount.get('target') != 'specific':
        return # –ù–∞—Ä–∞–∑—ñ —Å–ø–æ–≤—ñ—â–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ –∑–Ω–∏–∂–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏

    product_ids = discount.get('product_ids', [])
    for user_id, user_data in clients_db.items():
        wishlist = user_data.get('wishlist', [])
        for product_id in product_ids:
            if product_id in wishlist:
                product = get_product_by_id(product_id)
                if product:
                    try:
                        bot.send_message(
                            user_id,
                            get_text("wishlist_notification", user_id).format(product_name=product['name'])
                        )
                        # –©–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        break 
                    except Exception as e:
                        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–Ω–∏–∂–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

# -----------------
# Flask API
# -----------------

@app.route("/")
def index_page():
    return send_from_directory('.', 'admin.html')

@app.route('/api/upload', methods=['POST'])
def upload_file():
    if not bot:
        return jsonify({"message": "Telegram Bot –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"}), 500
    if 'file' not in request.files:
        return jsonify({"message": "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({"message": "–§–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ"}), 400
    try:
        file_type = file.content_type
        if 'image' in file_type:
            msg = bot.send_photo(TELEGRAM_CHAT_ID, file)
            file_id = msg.photo[-1].file_id
            file_type_out = 'photo'
        else:
            msg = bot.send_document(TELEGRAM_CHAT_ID, file)
            file_id = msg.document.file_id
            file_type_out = 'document'
        bot.delete_message(TELEGRAM_CHAT_ID, msg.message_id)
        return jsonify({"file_id": file_id, "file_type": file_type_out}), 200
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤ Telegram: {e}")
        return jsonify({"message": "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª"}), 500

# --- –ì–æ–ª–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å —Ç–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ ---
@app.route("/api/admin/stats", methods=['GET'])
def get_admin_stats():
    total_revenue = sum(o.get('totalPrice', 0) for o in db['orders'] if o.get('status') == '–í–∏–∫–æ–Ω–∞–Ω–æ')
    products_no_content = sum(1 for p in db['products'] if p.get('product_type') == 'link' and not p.get('content', '').strip())
    total_referrals = sum(c.get('referrals_count', 0) for c in clients_db.values())
    stats = {
        "total_revenue": total_revenue,
        "total_orders": len(db['orders']),
        "total_clients": len(clients_db),
        "total_referrals": total_referrals,
        "pending_reviews": sum(1 for r in db['reviews'] if not r.get('approved')),
        "products_no_content": products_no_content,
    }
    return jsonify(stats)

@app.route("/api/admin/analytics", methods=['GET'])
def get_analytics_data():
    orders = db.get('orders', [])
    reviews = db.get('reviews', [])
    revenue_by_day = defaultdict(float)
    today = datetime.date.today()
    for i in range(7):
        day = today - datetime.timedelta(days=i)
        revenue_by_day[day.strftime('%Y-%m-%d')] = 0
    for order in orders:
        if order.get('status') == '–í–∏–∫–æ–Ω–∞–Ω–æ' and 'date' in order:
            order_date = datetime.datetime.fromisoformat(order['date']).date()
            if (today - order_date).days < 7:
                revenue_by_day[order_date.strftime('%Y-%m-%d')] += order.get('totalPrice', 0)
    sorted_revenue = sorted(revenue_by_day.items())
    revenue_chart_data = {
        "labels": [datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m') for date, _ in sorted_revenue],
        "data": [amount for _, amount in sorted_revenue]
    }
    product_sales = Counter()
    for order in orders:
        if order.get('status') == '–í–∏–∫–æ–Ω–∞–Ω–æ':
            for item in order.get('items', []):
                product_sales[item.get('product_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä')] += 1
    top_products = [{"name": name, "sales": count} for name, count in product_sales.most_common(5)]
    completed_orders = [o for o in orders if o.get('status') == '–í–∏–∫–æ–Ω–∞–Ω–æ']
    total_revenue = sum(o.get('totalPrice', 0) for o in completed_orders)
    average_check = (total_revenue / len(completed_orders)) if completed_orders else 0
    review_stats = {"approved": sum(1 for r in reviews if r.get('approved')), "total": len(reviews)}
    registrations_by_day = defaultdict(int)
    for i in range(7):
        day = today - datetime.timedelta(days=i)
        registrations_by_day[day.strftime('%Y-%m-%d')] = 0
    for client_id, client_data in clients_db.items():
        reg_date_str = client_data.get('registration_date')
        if reg_date_str:
            reg_date = datetime.datetime.fromisoformat(reg_date_str).date()
            if (today - reg_date).days < 7:
                 registrations_by_day[reg_date.strftime('%Y-%m-%d')] += 1
    sorted_registrations = sorted(registrations_by_day.items())
    registrations_chart_data = {
        "labels": [datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m') for date, _ in sorted_registrations],
        "data": [count for _, count in sorted_registrations]
    }
    analytics = {
        "revenue_chart": revenue_chart_data,
        "registrations_chart": registrations_chart_data,
        "top_products": top_products,
        "kpi": {"average_check": round(average_check, 2), "review_stats": review_stats}
    }
    return jsonify(analytics)

# --- –ö–ª—ñ—î–Ω—Ç–∏ (CRM) ---
@app.route("/api/admin/clients", methods=['GET'])
def get_all_clients():
    client_list = [{**data, 'user_id': uid} for uid, data in clients_db.items()]
    return jsonify(client_list)

@app.route("/api/admin/clients/<client_id>/ban", methods=['POST'])
def ban_client(client_id):
    if client_id in clients_db:
        data = request.json
        is_banned = data.get('ban', False)
        clients_db[client_id]['is_banned'] = is_banned
        save_clients(clients_db)
        action = "–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ" if is_banned else "—Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ"
        log_action("Client Status Change", f"Client {client_id} was {action}.")
        return jsonify({"message": f"–ö–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ {action}"}), 200
    return jsonify({"message": "–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

@app.route("/api/admin/clients/<client_id>/details", methods=['GET'])
def get_client_details(client_id):
    client = clients_db.get(client_id)
    if not client:
        return jsonify({"message": "–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
    client['user_id'] = client_id
    client_orders = [o for o in db['orders'] if str(o.get('telegram_id')) == str(client_id)]
    ltv = sum(o.get('totalPrice', 0) for o in client_orders if o.get('status') == '–í–∏–∫–æ–Ω–∞–Ω–æ')
    return jsonify({"client": client, "orders": client_orders, "ltv": ltv})

@app.route("/api/admin/clients/<client_id>/notes", methods=['POST'])
def add_client_note(client_id):
    if client_id in clients_db:
        if 'notes' not in clients_db[client_id]:
            clients_db[client_id]['notes'] = []
        note = {
            "date": datetime.datetime.now().isoformat(),
            "text": request.json.get('text'),
            "author": "Admin"
        }
        clients_db[client_id]['notes'].insert(0, note)
        save_clients(clients_db)
        log_action("Client Note Added", f"Note added for client {client_id}.")
        return jsonify(clients_db[client_id]), 200
    return jsonify({"message": "–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

# --- –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ (–¢—ñ–∫–µ—Ç–∏) ---
@app.route("/api/support-tickets", methods=['GET'])
def get_tickets():
    return jsonify(support_tickets)

@app.route("/api/support-tickets/<ticket_id>", methods=['GET'])
def get_ticket(ticket_id):
    ticket = next((t for t in support_tickets if t['id'] == ticket_id), None)
    return jsonify(ticket) if ticket else (jsonify({"message": "–¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404)

@app.route("/api/support-tickets/<ticket_id>/reply", methods=['POST'])
def reply_to_ticket(ticket_id):
    ticket = next((t for t in support_tickets if t['id'] == ticket_id), None)
    if not ticket:
        return jsonify({"message": "–¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
    data = request.json
    ticket['messages'].append({
        "sender": "admin",
        "text": data.get('message'),
        "timestamp": datetime.datetime.now().isoformat()
    })
    ticket['status'] = data.get('status', ticket['status'])
    ticket['last_updated'] = datetime.datetime.now().isoformat()
    save_json_file(SUPPORT_TICKETS_FILE, support_tickets)
    log_action("Support Ticket Reply", f"Replied to ticket {ticket_id}.")
    if bot and ticket.get('client_id'):
        try:
            bot.send_message(ticket['client_id'], f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{ticket_id[:6]}:\n\n{data.get('message')}")
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç—ñ–∫–µ—Ç {ticket_id} –≤ Telegram: {e}")
    return jsonify(ticket)

# --- –¢–æ–≤–∞—Ä–∏, –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó, –ö–æ–ª–µ–∫—Ü—ñ—ó ---
@app.route("/api/products", methods=['GET', 'POST'])
def handle_products():
    if request.method == 'GET':
        discounts = db.get("discounts", [])
        products_with_discounts = apply_discounts(db["products"], discounts)
        return jsonify(products_with_discounts)
    if request.method == 'POST':
        data = request.json
        data['id'] = str(uuid.uuid4())
        data.setdefault('product_type', 'link')
        data.setdefault('content', '')
        data.setdefault('category_id', '')
        db['products'].insert(0, data)
        save_data(db)
        log_action("Product Created", f"Product '{data['name']}' created.")
        return jsonify(data), 201

@app.route("/api/products/<product_id>", methods=['GET', 'PUT', 'DELETE'])
def handle_product(product_id):
    product = next((p for p in db['products'] if p.get('id') == product_id), None)
    if not product:
        return jsonify({"message": "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
    if request.method == 'GET':
        discounts = db.get("discounts", [])
        product_with_discount = apply_discounts([product], discounts)[0]
        return jsonify(product_with_discount)
    if request.method == 'PUT':
        data = request.json
        product.update(data)
        save_data(db)
        log_action("Product Updated", f"Product '{product['name']}' ({product_id}) updated.")
        return jsonify(product)
    if request.method == 'DELETE':
        product_name = product.get('name', 'N/A')
        db['products'] = [p for p in db['products'] if p.get('id') != product_id]
        save_data(db)
        log_action("Product Deleted", f"Product '{product_name}' ({product_id}) deleted.")
        return jsonify({"message": "–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ"})

@app.route("/api/products/import", methods=['POST'])
def import_products():
    if 'file' not in request.files:
        return jsonify({"message": "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({"message": "–§–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ"}), 400
    new_products_count = 0
    try:
        stream = StringIO(file.stream.read().decode("utf-8"))
        csv_reader = csv.DictReader(stream)
        products_to_add = []
        for i, row in enumerate(csv_reader):
            try:
                product_name = row.get("–ù–∞–∑–≤–∞_–ø–æ–∑–∏—Ü—ñ—ó_—É–∫—Ä", "").strip()
                product_price_str = row.get("–¶—ñ–Ω–∞", "0").replace(',', '.')
                product_description = row.get("–û–ø–∏—Å_—É–∫—Ä", "").strip()
                image_url = row.get("–ü–æ—Å–∏–ª–∞–Ω–Ω—è_–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "").strip()
                product_description = strip_html_tags(product_description).strip()
                try:
                    product_price = int(float(product_price_str))
                except (ValueError, TypeError):
                    product_price = 0
                if product_name and product_price > 0:
                    products_to_add.append({
                        "id": str(uuid.uuid4()),
                        "name": product_name,
                        "price": product_price,
                        "description": product_description,
                        "image": image_url if image_url else "https://placehold.co/400x300/4a5568/ffffff?text=Product",
                        "product_type": "link",
                        "content": "",
                        "category_id": ""
                    })
            except Exception as row_error:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä—è–¥–∫–∞ {i+1} —É CSV: {row_error}")
                continue
        db["products"].extend(products_to_add)
        save_data(db)
        new_products_count = len(products_to_add)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —Ñ–∞–π–ª—É: {e}")
        return jsonify({"message": f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: {e}"}), 500
    return jsonify({"message": f"–£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {new_products_count} —Ç–æ–≤–∞—Ä—ñ–≤.", "count": new_products_count})

@app.route("/api/products/clear", methods=['DELETE'])
def clear_products():
    db["products"] = []
    save_data(db)
    return jsonify({"message": "–£—Å—ñ —Ç–æ–≤–∞—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ"})

@app.route("/api/categories", methods=['GET', 'POST'])
def handle_categories():
    if request.method == 'GET':
        return jsonify(db.get("categories", []))
    if request.method == 'POST':
        data = request.json
        name = data.get('name', '').strip()
        if not name:
            return jsonify({"message": "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é"}), 400
        new_category = {"id": str(uuid.uuid4()), "name": name}
        db["categories"].append(new_category)
        save_data(db)
        return jsonify(new_category), 201

@app.route("/api/categories/<category_id>", methods=['DELETE'])
def delete_category(category_id):
    db["categories"] = [cat for cat in db["categories"] if cat.get('id') != category_id]
    for product in db["products"]:
        if product.get('category_id') == category_id:
            product['category_id'] = ""
    save_data(db)
    return jsonify({"message": "–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ"}), 200

@app.route("/api/bundles", methods=['GET', 'POST'])
def handle_bundles():
    if request.method == 'GET':
        return jsonify(db.get("bundles", []))
    if request.method == 'POST':
        data = request.json
        new_bundle = {
            "id": str(uuid.uuid4()),
            "name": data.get('name'),
            "description": data.get('description'),
            "product_ids": data.get('product_ids', []),
            "discount_percentage": data.get('discount_percentage', 0)
        }
        db["bundles"].append(new_bundle)
        save_data(db)
        return jsonify(new_bundle), 201

@app.route("/api/bundles/<bundle_id>", methods=['PUT', 'DELETE'])
def handle_specific_bundle(bundle_id):
    bundle = next((b for b in db.get("bundles", []) if b.get('id') == bundle_id), None)
    if not bundle:
        return jsonify({"message": "–ö–æ–ª–µ–∫—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
    if request.method == 'PUT':
        data = request.json
        bundle.update(data)
        save_data(db)
        return jsonify(bundle)
    if request.method == 'DELETE':
        db["bundles"] = [b for b in db["bundles"] if b.get('id') != bundle_id]
        save_data(db)
        return jsonify({"message": "–ö–æ–ª–µ–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ"})

# --- –í—ñ–¥–≥—É–∫–∏ ---
@app.route("/api/reviews", methods=['GET', 'POST'])
def handle_reviews():
    if request.method == 'GET':
        return jsonify([r for r in db.get('reviews', []) if r.get('approved', False)])
    if request.method == 'POST':
        data = request.json
        review_id = str(uuid.uuid4())
        rating = data.get('rating')
        approved = rating is not None and rating >= 3 # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ >=3 –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è
        new_review = {
            "id": review_id,
            "product_id": data.get('product_id'),
            "user_id": data.get('user_id'),
            "username": data.get('username'),
            "rating": rating,
            "comment": data.get('comment'),
            "date": datetime.datetime.now().isoformat(),
            "approved": approved
        }
        db["reviews"].append(new_review)
        save_data(db)
        
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = ""
        if not approved:
            admin_message = (f"<b>‚ùóÔ∏è –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!</b>\n\n"
                           f"<b>–¢–æ–≤–∞—Ä:</b> {data.get('product_name', 'N/A')}\n"
                           f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {'‚≠ê' * rating}\n"
                           f"<b>–í—ñ–¥–≥—É–∫:</b> {data.get('comment', 'N/A')}\n\n"
                           f"<i>–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.</i>")
        elif rating <= 2: # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∏–∑—å–∫—É –æ—Ü—ñ–Ω–∫—É, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Å—Ö–≤–∞–ª–µ–Ω–æ
             admin_message = (f"<b>üìâ –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤—ñ–¥–≥—É–∫!</b>\n\n"
                           f"<b>–¢–æ–≤–∞—Ä:</b> {data.get('product_name', 'N/A')}\n"
                           f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {'‚≠ê' * rating}\n"
                           f"<b>–í—ñ–¥–≥—É–∫:</b> {data.get('comment', 'N/A')}")

        if admin_message:
            send_admin_notification(admin_message)

        return jsonify({"message": "–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", "reviewId": review_id, "approved": approved}), 201

@app.route("/api/admin/reviews", methods=['GET'])
def get_all_reviews_admin():
    reviews_list = db.get('reviews', [])
    for review in reviews_list:
        product = get_product_by_id(review.get('product_id'))
        review['product_name'] = product['name'] if product else "–í–∏–¥–∞–ª–µ–Ω–∏–π —Ç–æ–≤–∞—Ä"
        user = clients_db.get(str(review.get('user_id')))
        review['user_name'] = user.get('name', '–ê–Ω–æ–Ω—ñ–º') if user else '–ê–Ω–æ–Ω—ñ–º'
    return jsonify(reviews_list)

@app.route("/api/admin/reviews/<review_id>", methods=['PUT', 'DELETE'])
def handle_specific_review_admin(review_id):
    review = next((r for r in db['reviews'] if r['id'] == review_id), None)
    if not review:
        return jsonify({"message": "–í—ñ–¥–≥—É–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
    if request.method == 'PUT':
        data = request.json
        review['approved'] = data.get('approved', review['approved'])
        save_data(db)
        return jsonify(review)
    if request.method == 'DELETE':
        db['reviews'] = [r for r in db['reviews'] if r['id'] != review_id]
        save_data(db)
        return jsonify({"message": "–í—ñ–¥–≥—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ"})

# --- –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ---
@app.route("/api/orders", methods=['GET'])
def get_orders():
    orders = db.get("orders", [])
    for order in orders:
        user_id = order.get('telegram_id')
        user_info = clients_db.get(str(user_id))
        order['user_name'] = user_info.get('name', 'N/A') if user_info else 'N/A'
        order['user_id'] = user_id
    return jsonify(orders)

@app.route("/api/orders/<order_id>", methods=['PUT', 'DELETE'])
def handle_specific_order(order_id):
    order = next((o for o in db["orders"] if o.get('orderId') == order_id or o.get('id') == order_id), None)
    if not order:
        return jsonify({"message": "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
    if request.method == 'PUT':
        updated_data = request.json
        order['status'] = updated_data.get('status', order['status'])
        save_data(db)
        return jsonify(order)
    if request.method == 'DELETE':
        db["orders"] = [o for o in db["orders"] if o.get('orderId', o.get('id')) != order_id]
        save_data(db)
        return jsonify({"message": "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ"})

# --- –ù–æ–≤–∏–Ω–∏, –†–æ–∑—Å–∏–ª–∫–∞ —Ç–∞ —ñ–Ω—à—ñ API –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É ---
@app.route("/api/news", methods=['GET', 'POST'])
def handle_news():
    if request.method == 'GET':
        news_list = db.get('news', [])
        sorted_news = sorted(news_list, key=lambda x: x.get('created_at', '1970-01-01'), reverse=True)
        return jsonify(sorted_news)
    if request.method == 'POST':
        data = request.json
        new_item = {
            "id": str(uuid.uuid4()),
            "text": data.get('text'),
            "created_at": datetime.datetime.now().isoformat(),
            "photo_id": data.get("photo_id"),
            "document_id": data.get("document_id")
        }
        db['news'].append(new_item)
        save_data(db)
        return jsonify(new_item), 201

@app.route("/api/news/<news_id>", methods=['GET', 'PUT', 'DELETE'])
def handle_specific_news(news_id):
    news_item = next((n for n in db['news'] if n['id'] == news_id), None)
    if not news_item:
        return jsonify({"message": "–ù–æ–≤–∏–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
    if request.method == 'GET':
        return jsonify(news_item)
    if request.method == 'PUT':
        data = request.json
        news_item['text'] = data.get('text', news_item['text'])
        news_item['photo_id'] = data.get('photo_id', news_item.get('photo_id'))
        news_item['document_id'] = data.get('document_id', news_item.get('document_id'))
        save_data(db)
        return jsonify(news_item)
    if request.method == 'DELETE':
        db['news'] = [n for n in db['news'] if n['id'] != news_id]
        save_data(db)
        return jsonify({"message": "–ù–æ–≤–∏–Ω—É –≤–∏–¥–∞–ª–µ–Ω–æ"})

@app.route("/api/admin/broadcast", methods=['POST'])
def handle_broadcast():
    data = request.json
    message = data.get('message')
    photo_id = data.get('photo_id')
    document_id = data.get('document_id')
    if not message and not photo_id and not document_id:
        return jsonify({"message": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Ñ–∞–π–ª –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏"}), 400
    broadcast_thread = Thread(target=send_broadcast_message, args=(message, TELEGRAM_CHAT_ID, photo_id, document_id))
    broadcast_thread.start()
    return jsonify({"message": "–†–æ–∑—Å–∏–ª–∫—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ..."})
    
# --- –Ü–Ω—à—ñ API ---
@app.route("/api/shop-info", methods=['GET', 'PUT'])
def handle_shop_info():
    if request.method == 'GET':
        return jsonify(db.get("shop_info", {"name": "Shop", "description": ""}))
    if request.method == 'PUT':
        db["shop_info"] = request.json
        save_data(db)
        return jsonify(db["shop_info"])

@app.route("/api/regions", methods=['GET'])
def get_regions():
    return jsonify(REGIONS)

@app.route("/api/chatbot-knowledge", methods=['GET', 'POST'])
def handle_chatbot_knowledge():
    global chatbot_knowledge
    if request.method == 'GET':
        return jsonify(chatbot_knowledge)
    if request.method == 'POST':
        data = request.json
        if not data.get('keywords') or not data.get('response'):
            return jsonify({"message": "–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ"}), 400
        new_entry = {"id": str(uuid.uuid4()), **data}
        chatbot_knowledge.append(new_entry)
        save_chatbot_knowledge(chatbot_knowledge)
        return jsonify(new_entry), 201

@app.route("/api/chatbot-knowledge/<knowledge_id>", methods=['DELETE'])
def delete_chatbot_knowledge(knowledge_id):
    global chatbot_knowledge
    chatbot_knowledge = [item for item in chatbot_knowledge if item.get('id') != knowledge_id]
    save_chatbot_knowledge(chatbot_knowledge)
    return jsonify({"message": "–ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ"})
    
# --- –ú–ê–†–ö–ï–¢–ò–ù–ì: –ó–Ω–∏–∂–∫–∏, –ü—Ä–æ–º–æ–∫–æ–¥–∏, –ë–æ–Ω—É—Å–∏ ---
@app.route("/api/discounts", methods=['GET', 'POST'])
def handle_discounts():
    if request.method == 'GET':
        return jsonify(db.get('discounts', []))
    if request.method == 'POST':
        new_discount = request.json
        new_discount['id'] = str(uuid.uuid4())
        db['discounts'].append(new_discount)
        save_data(db)
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        thread = Thread(target=notify_users_about_discount, args=(new_discount,))
        thread.start()
        return jsonify(new_discount), 201

@app.route("/api/discounts/<discount_id>", methods=['DELETE'])
def delete_discount(discount_id):
    db['discounts'] = [d for d in db['discounts'] if d.get('id') != discount_id]
    save_data(db)
    return jsonify({"message": "–ê–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ"})

@app.route("/api/promocodes", methods=['GET', 'POST'])
def handle_promocodes():
    if request.method == 'GET':
        return jsonify(db.get('promocodes', []))
    if request.method == 'POST':
        data = request.json
        new_code = {
            "id": str(uuid.uuid4()),
            "code": data.get('code').upper(),
            "discount_percentage": data.get('discount_percentage'),
            "uses_left": data.get('total_uses')
        }
        db['promocodes'].append(new_code)
        save_data(db)
        return jsonify(new_code), 201

@app.route("/api/promocodes/<code>", methods=['DELETE'])
def delete_promocode(code):
    initial_len = len(db.get('promocodes', []))
    db['promocodes'] = [p for p in db.get('promocodes', []) if p.get('code', '').upper() != code.upper()]
    if len(db['promocodes']) < initial_len:
        save_data(db)
        return jsonify({"message": "–ü—Ä–æ–º–æ–∫–æ–¥ –≤–∏–¥–∞–ª–µ–Ω–æ"})
    return jsonify({"message": "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

@app.route("/api/admin/bonus-settings", methods=['GET', 'PUT'])
def handle_bonus_settings():
    if request.method == 'GET':
        return jsonify(db.get('bonus_settings', {}))
    if request.method == 'PUT':
        data = request.json
        db['bonus_settings']['referral_bonus'] = data.get('referral_bonus')
        db['bonus_settings']['purchase_bonus_percentage'] = data.get('purchase_bonus_percentage')
        save_data(db)
        return jsonify(db['bonus_settings'])

# --- –ù–û–í–Ü API –î–õ–Ø –ú–ê–†–ö–ï–¢–ò–ù–ì–£ ---
@app.route("/api/admin/loyalty-levels", methods=['GET', 'PUT'])
def handle_loyalty_levels():
    if request.method == 'GET':
        return jsonify(db.get('loyalty_levels', []))
    if request.method == 'PUT':
        db['loyalty_levels'] = request.json
        save_data(db)
        log_action("Loyalty Levels Updated", "Admin updated the loyalty level settings.")
        return jsonify(db['loyalty_levels'])

@app.route("/api/admin/deal-of-the-day", methods=['GET', 'POST'])
def handle_deal_of_the_day():
    if request.method == 'GET':
        return jsonify(db.get('deal_of_the_day', {}))
    if request.method == 'POST':
        data = request.json
        db['deal_of_the_day'] = {
            "product_id": data.get("product_id"),
            "discount_percentage": data.get("discount_percentage"),
            "end_date": data.get("end_date")
        }
        save_data(db)
        log_action("Deal of the Day Set", f"Product {data.get('product_id')} set as deal of the day.")
        return jsonify(db['deal_of_the_day'])

@app.route("/api/admin/clients/<client_id>/generate-promocode", methods=['POST'])
def generate_personal_promocode(client_id):
    if client_id not in clients_db:
        return jsonify({"message": "–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
    
    data = request.json
    discount = data.get('discount_percentage', 10)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥
    while True:
        code = f"P-{random.randint(1000, 9999)}"
        if not any(p['code'] == code for p in db.get('promocodes', [])):
            break
            
    new_code = {
        "id": str(uuid.uuid4()),
        "code": code,
        "discount_percentage": discount,
        "uses_left": 1,
        "user_id": client_id # –ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    }
    db['promocodes'].append(new_code)
    save_data(db)
    log_action("Personal Promocode Generated", f"Code {code} for client {client_id}.")
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    try:
        bot.send_message(
            client_id, 
            get_text("personal_promocode_notification", client_id).format(
                discount=discount, 
                code=code
            )
        )
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ –∫–ª—ñ—î–Ω—Ç—É {client_id}: {e}")

    return jsonify(new_code), 201
# --- –ö–Ü–ù–ï–¶–¨ –ù–û–í–ò–• API ---

# --- –§–Ü–ù–ê–ù–°–ò ---
@app.route("/api/finances/transactions", methods=['GET'])
def get_transactions():
    completed_orders = [o for o in db.get('orders', []) if o.get('status') == '–í–∏–∫–æ–Ω–∞–Ω–æ']
    transactions = []
    for order in completed_orders:
        transactions.append({
            "date": order.get('date'),
            "order_id": order.get('orderId', 'N/A'),
            "amount": order.get('totalPrice', 0)
        })
    transactions.sort(key=lambda x: x.get('date', ''), reverse=True)
    return jsonify(transactions)

@app.route("/api/finances/payment-methods", methods=['GET'])
def get_payment_methods():
    methods = [{"id": key, **value} for key, value in payment_details.items()]
    return jsonify(methods)

@app.route("/api/finances/payment-methods", methods=['POST'])
def add_payment_method():
    global payment_details
    data = request.json
    method_id = data.get('account_name', '').lower().replace(' ', '_') + f"_{random.randint(100, 999)}"
    if method_id in payment_details:
        return jsonify({"message": "–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ –∑ —Ç–∞–∫–∏–º ID –≤–∂–µ —ñ—Å–Ω—É—î"}), 409
    
    payment_details[method_id] = {
        "account_name": data.get("account_name"),
        "account_number": data.get("account_number"),
        "payment_link": data.get("payment_link"),
        "instructions": data.get("instructions")
    }
    save_payment_details(payment_details)
    log_action("Payment Method Added", f"Method '{data.get('account_name')}' was added.")
    return jsonify({"id": method_id, **payment_details[method_id]}), 201

@app.route("/api/finances/payment-methods/<method_id>", methods=['PUT'])
def update_payment_method(method_id):
    global payment_details
    if method_id not in payment_details:
        return jsonify({"message": "–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
    
    data = request.json
    payment_details[method_id] = {
        "account_name": data.get("account_name"),
        "account_number": data.get("account_number"),
        "payment_link": data.get("payment_link"),
        "instructions": data.get("instructions")
    }
    save_payment_details(payment_details)
    log_action("Payment Method Updated", f"Method '{data.get('account_name')}' ({method_id}) was updated.")
    return jsonify({"id": method_id, **payment_details[method_id]})

@app.route("/api/finances/payment-methods/<method_id>", methods=['DELETE'])
def delete_payment_method(method_id):
    global payment_details
    if method_id in payment_details:
        deleted_name = payment_details[method_id].get('account_name', method_id)
        del payment_details[method_id]
        save_payment_details(payment_details)
        log_action("Payment Method Deleted", f"Method '{deleted_name}' ({method_id}) was deleted.")
        return jsonify({"message": "–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ"})
    return jsonify({"message": "–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

# --- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–∞–Ω–µ–ª—ñ ---
@app.route("/api/users", methods=['GET', 'POST'])
def handle_users():
    global panel_users
    if request.method == 'GET':
        return jsonify(panel_users)
    if request.method == 'POST':
        data = request.json
        if not data.get('login') or not data.get('password'):
            return jsonify({"message": "–õ–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ"}), 400
        new_user = {
            "id": str(uuid.uuid4()),
            "login": data['login'],
            "password_hash": hashlib.sha256(data['password'].encode()).hexdigest(),
            "role": data.get('role', 'manager'),
            "created_at": datetime.datetime.now().isoformat()
        }
        panel_users.append(new_user)
        save_json_file(USERS_FILE, panel_users)
        log_action("User Created", f"Panel user '{new_user['login']}' created with role '{new_user['role']}'.")
        return jsonify(new_user), 201

@app.route("/api/users/<user_id>", methods=['DELETE'])
def delete_user(user_id):
    global panel_users
    user_to_delete = next((u for u in panel_users if u['id'] == user_id), None)
    if not user_to_delete:
        return jsonify({"message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
    panel_users = [u for u in panel_users if u['id'] != user_id]
    save_json_file(USERS_FILE, panel_users)
    log_action("User Deleted", f"Panel user '{user_to_delete['login']}' deleted.")
    return jsonify({"message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ"})

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞ –õ–æ–≥–∏) ---
@app.route("/api/settings/backup", methods=['POST'])
def create_backup():
    if not os.path.exists(BACKUP_DIR):
        os.makedirs(BACKUP_DIR)
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    backup_filename = os.path.join(BACKUP_DIR, f"backup_{timestamp}.zip")
    files_to_backup = [
        DATA_FILE, CLIENTS_FILE, CHATBOT_KNOWLEDGE_FILE, 
        PAYMENTS_FILE, SUPPORT_TICKETS_FILE, USERS_FILE, SYSTEM_LOG_FILE
    ]
    try:
        with zipfile.ZipFile(backup_filename, 'w') as zipf:
            for file in files_to_backup:
                if os.path.exists(file):
                    zipf.write(file, os.path.basename(file))
        log_action("Backup Created", f"Backup file '{os.path.basename(backup_filename)}' created.")
        return jsonify({"message": "–†–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!", "filename": os.path.basename(backup_filename)})
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó: {e}")
        return jsonify({"message": "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó"}), 500

@app.route("/api/settings/backups", methods=['GET'])
def get_backups():
    if not os.path.exists(BACKUP_DIR):
        return jsonify([])
    files = sorted(os.listdir(BACKUP_DIR), reverse=True)
    return jsonify(files)

@app.route("/api/settings/backups/<filename>", methods=['GET'])
def download_backup(filename):
    filepath = os.path.join(BACKUP_DIR, filename)
    if os.path.exists(filepath):
        return send_file(filepath, as_attachment=True)
    return jsonify({"message": "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

@app.route("/api/settings/logs", methods=['GET'])
def get_system_logs():
    return jsonify(system_logs)

# -----------------
# File Manager API
# -----------------
ROOT_DIR = os.path.abspath(os.path.dirname(__file__))
ALLOWED_EXTENSIONS = ['.json', '.py', '.html', '.js', '.css', '.txt']

def is_safe_path(path):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —à–ª—è—Ö —î –±–µ–∑–ø–µ—á–Ω–∏–º —ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –º–µ–∂–∞—Ö –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó."""
    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —à–ª—è—Ö, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ç–∞–∫–∏—Ö —Ä–µ—á–µ–π, —è–∫ 'folder/../folder'
    path = os.path.normpath(path)
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –≤—ñ–¥ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É
    abs_path = os.path.abspath(os.path.join(ROOT_DIR, path))
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —à–ª—è—Ö –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —à–ª—è—Ö—É –¥–æ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    return abs_path.startswith(ROOT_DIR)

@app.route('/api/files', methods=['GET'])
def list_files():
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –ø–∞–ø–æ–∫ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º —à–ª—è—Ö–æ–º."""
    req_path = request.args.get('path', '')
    if not is_safe_path(req_path):
        return jsonify({"message": "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ"}), 403

    abs_path = os.path.join(ROOT_DIR, req_path)
    if not os.path.exists(abs_path) or not os.path.isdir(abs_path):
        return jsonify({"message": "–®–ª—è—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

    items = []
    try:
        for item in os.listdir(abs_path):
            item_path = os.path.join(abs_path, item)
            rel_path = os.path.join(req_path, item).replace("\\", "/") # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–ª—è –≤–µ–±
            if os.path.isdir(item_path):
                items.append({"name": item, "type": "directory", "path": rel_path})
            else:
                items.append({"name": item, "type": "file", "path": rel_path})
    except OSError:
        return jsonify({"message": "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é"}), 500
    
    # –°–æ—Ä—Ç—É—î–º–æ: —Å–ø–æ—á–∞—Ç–∫—É –ø–∞–ø–∫–∏, –ø–æ—Ç—ñ–º —Ñ–∞–π–ª–∏
    items.sort(key=lambda x: (x['type'] != 'directory', x['name'].lower()))
    return jsonify(items)

@app.route('/api/file-content', methods=['GET', 'POST'])
def handle_file_content():
    """–ß–∏—Ç–∞—î –∞–±–æ –∑–∞–ø–∏—Å—É—î –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É."""
    if request.method == 'GET':
        file_path = request.args.get('path', '')
        if not is_safe_path(file_path):
            return jsonify({"message": "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ"}), 403
        
        _, ext = os.path.splitext(file_path)
        if ext.lower() not in ALLOWED_EXTENSIONS:
            return jsonify({"message": f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —Ç–∏–ø—É '{ext}' –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ"}), 403

        abs_path = os.path.join(ROOT_DIR, file_path)
        if not os.path.exists(abs_path) or not os.path.isfile(abs_path):
            return jsonify({"message": "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
        
        try:
            with open(abs_path, 'r', encoding='utf-8') as f:
                content = f.read()
            return jsonify({"path": file_path, "content": content})
        except Exception as e:
            return jsonify({"message": f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {e}"}), 500

    if request.method == 'POST':
        data = request.json
        file_path = data.get('path')
        content = data.get('content')

        if not file_path or not is_safe_path(file_path):
            return jsonify({"message": "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∞–±–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π —à–ª—è—Ö"}), 403
            
        _, ext = os.path.splitext(file_path)
        if ext.lower() not in ALLOWED_EXTENSIONS:
            return jsonify({"message": f"–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —Ç–∏–ø—É '{ext}' –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ"}), 403

        abs_path = os.path.join(ROOT_DIR, file_path)
        try:
            with open(abs_path, 'w', encoding='utf-8') as f:
                f.write(content)
            log_action("File Edited", f"File '{file_path}' was edited.")
            return jsonify({"message": f"–§–∞–π–ª '{file_path}' —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ"})
        except Exception as e:
            return jsonify({"message": f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}"}), 500

@app.route('/api/files', methods=['POST', 'DELETE'])
def manage_files():
    """–°—Ç–≤–æ—Ä—é—î –∞–±–æ –≤–∏–¥–∞–ª—è—î —Ñ–∞–π–ª–∏/–ø–∞–ø–∫–∏."""
    data = request.json
    path = data.get('path')

    if not path or not is_safe_path(path):
        return jsonify({"message": "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∞–±–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π —à–ª—è—Ö"}), 403
    
    abs_path = os.path.join(ROOT_DIR, path)

    if request.method == 'POST': # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è
        item_type = data.get('type', 'file')
        if os.path.exists(abs_path):
            return jsonify({"message": "–§–∞–π–ª –∞–±–æ –ø–∞–ø–∫–∞ –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –≤–∂–µ —ñ—Å–Ω—É—î"}), 409
        
        try:
            if item_type == 'directory':
                os.makedirs(abs_path)
                log_action("Directory Created", f"Directory '{path}' created.")
                return jsonify({"message": f"–ü–∞–ø–∫—É '{path}' —Å—Ç–≤–æ—Ä–µ–Ω–æ"})
            else:
                _, ext = os.path.splitext(path)
                if ext.lower() not in ALLOWED_EXTENSIONS:
                     return jsonify({"message": f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —Ç–∏–ø—É '{ext}' –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ"}), 403
                with open(abs_path, 'w', encoding='utf-8') as f:
                    f.write('') # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª
                log_action("File Created", f"File '{path}' created.")
                return jsonify({"message": f"–§–∞–π–ª '{path}' —Å—Ç–≤–æ—Ä–µ–Ω–æ"})
        except Exception as e:
            return jsonify({"message": f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}"}), 500

    if request.method == 'DELETE':
        if not os.path.exists(abs_path):
            return jsonify({"message": "–§–∞–π–ª –∞–±–æ –ø–∞–ø–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
        
        try:
            if os.path.isdir(abs_path):
                shutil.rmtree(abs_path) # –í–∏–¥–∞–ª—è—î –ø–∞–ø–∫—É —Ç–∞ –≤–µ—Å—å —ó—ó –≤–º—ñ—Å—Ç
                log_action("Directory Deleted", f"Directory '{path}' deleted.")
                return jsonify({"message": f"–ü–∞–ø–∫—É '{path}' –≤–∏–¥–∞–ª–µ–Ω–æ"})
            else:
                os.remove(abs_path)
                log_action("File Deleted", f"File '{path}' deleted.")
                return jsonify({"message": f"–§–∞–π–ª '{path}' –≤–∏–¥–∞–ª–µ–Ω–æ"})
        except Exception as e:
            return jsonify({"message": f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}"}), 500

# -----------------
# Telegram Bot Handlers
# -----------------
STATUS_MAP = {"–ù–æ–≤–µ": "new", "–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è": "proc", "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ": "sent", "–í–∏–∫–æ–Ω–∞–Ω–æ": "done"}
REVERSE_STATUS_MAP = {v: k for k, v in STATUS_MAP.items()}

def is_banned(user_id):
    user = clients_db.get(str(user_id))
    return user and user.get('is_banned', False)

def check_ban(func):
    def wrapper(message_or_call):
        user_id = message_or_call.from_user.id
        if is_banned(user_id):
            try:
                bot.send_message(user_id, get_text("user_banned", user_id))
            except:
                bot.answer_callback_query(message_or_call.id, get_text("user_banned", user_id), show_alert=True)
            return
        return func(message_or_call)
    return wrapper

def get_categories_markup(user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    categories = db.get("categories", [])
    if categories:
        buttons = [types.InlineKeyboardButton(cat['name'], callback_data=f"cat_{cat['id']}_0_default") for cat in categories]
        markup.add(*buttons)
    markup.add(types.InlineKeyboardButton(get_text("all_products", user_id), callback_data="cat_all_0_default"))
    return markup

def get_products_markup(user_id, category_id='all', page=0, sort_by='default'):
    items_per_page = 5
    discounts = db.get('discounts', [])
    if category_id != 'all':
        products_to_show = [p for p in db.get('products', []) if p.get('category_id') == category_id]
        category = next((c for c in db.get('categories', []) if c.get('id') == category_id), None)
        category_name = category['name'] if category else "..."
        text = get_text("category_products", user_id).format(category_name=category_name, page=page + 1)
    else:
        products_to_show = db.get('products', [])
        text = get_text("all_products_paginated", user_id).format(page=page + 1)
    
    products_with_discounts = apply_discounts(products_to_show, discounts)

    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    if sort_by == 'price_asc':
        products_with_discounts.sort(key=lambda p: p['discounted_price'])
    elif sort_by == 'price_desc':
        products_with_discounts.sort(key=lambda p: p['discounted_price'], reverse=True)

    markup = types.InlineKeyboardMarkup(row_width=2)
    
    # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    sort_buttons = [
        types.InlineKeyboardButton("‚ñ≤ –¶—ñ–Ω–∞", callback_data=f"cat_{category_id}_{page}_price_asc"),
        types.InlineKeyboardButton("‚ñº –¶—ñ–Ω–∞", callback_data=f"cat_{category_id}_{page}_price_desc")
    ]
    markup.add(*sort_buttons)

    if not products_with_discounts:
        text += get_text("no_products_in_category", user_id)
        markup.add(types.InlineKeyboardButton(get_text("btn_to_categories", user_id), callback_data="back_to_categories"))
        return text, markup

    start = page * items_per_page
    end = start + items_per_page
    products_on_page = products_with_discounts[start:end]
    
    for product in products_on_page:
        if product['discounted_price'] < product['price']:
            button_text = f"{product['name']} - {product['discounted_price']} –≥—Ä–Ω (<s>{product['price']}</s>)"
        else:
            button_text = f"{product['name']} - {product['price']} –≥—Ä–Ω"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"show_product_{product['id']}"))
    
    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton(get_text("btn_prev_page", user_id), callback_data=f"cat_{category_id}_{page - 1}_{sort_by}"))
    if end < len(products_with_discounts):
        nav_buttons.append(types.InlineKeyboardButton(get_text("btn_next_page", user_id), callback_data=f"cat_{category_id}_{page + 1}_{sort_by}"))
    if nav_buttons:
        markup.row(*nav_buttons)
    
    markup.add(types.InlineKeyboardButton(get_text("btn_to_categories", user_id), callback_data="back_to_categories"))
    return text, markup

@bot.callback_query_handler(func=lambda call: call.data.startswith('cat_') or call.data == 'back_to_categories')
@check_ban
def handle_catalog_navigation(call):
    try:
        user_id = call.from_user.id
        if call.data == 'back_to_categories':
            text = get_text("catalog_title", user_id)
            markup = get_categories_markup(user_id)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=markup)
            bot.answer_callback_query(call.id)
            return
        
        parts = call.data.split('_')
        category_id = parts[1]
        page = int(parts[2])
        sort_by = parts[3] if len(parts) > 3 else 'default'

        text, markup = get_products_markup(user_id, category_id, page, sort_by)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=markup)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É: {e}")
        bot.answer_callback_query(call.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", show_alert=True)

def show_main_menu(chat_id):
    user_id = chat_id
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        types.KeyboardButton(get_text("btn_catalog", user_id)), 
        types.KeyboardButton(get_text("btn_cart", user_id)),
        types.KeyboardButton(get_text("btn_deal_of_the_day", user_id)),
        types.KeyboardButton(get_text("btn_purchases", user_id)),
        types.KeyboardButton(get_text("btn_profile", user_id)), 
        types.KeyboardButton(get_text("btn_reviews", user_id)),
        types.KeyboardButton(get_text("btn_promotions", user_id)), 
        types.KeyboardButton(get_text("btn_support", user_id)),
        types.KeyboardButton(get_text("btn_about", user_id)),
        types.KeyboardButton(get_text("btn_settings", user_id)),
        types.KeyboardButton(get_text("btn_wishlist", user_id)),
        types.KeyboardButton(get_text("btn_bundles", user_id)),
        types.KeyboardButton(get_text("btn_news", user_id)),
    ]
    markup.add(*buttons)
    bot.send_message(chat_id, get_text("main_menu", user_id), reply_markup=markup)

@bot.message_handler(commands=['start', 'help'])
@check_ban
def start_command(message):
    user_id = str(message.from_user.id)
    args = message.text.split()
    referrer_id = None
    if len(args) > 1:
        referrer_id = args[1]
    if user_id in clients_db:
        bot.send_message(message.chat.id, get_text("welcome_back", user_id).format(name=clients_db[user_id]['name']))
        show_main_menu(message.chat.id)
    else:
        ORDER_STATE[message.from_user.id] = {'step': 'register_name'}
        if referrer_id and referrer_id in clients_db:
            ORDER_STATE[message.from_user.id]['referred_by'] = referrer_id
        bot.send_message(message.chat.id, get_text("welcome", user_id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_product_'))
@check_ban
def handle_product_details(call):
    try:
        user_id = str(call.from_user.id)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        product_id = call.data.split('show_product_')[1]
        product = get_product_by_id(product_id)
        if product:
            discounts = db.get('discounts', [])
            discounted_product = apply_discounts([product], discounts)[0]
            markup = types.InlineKeyboardMarkup(row_width=2)
            wishlist = clients_db.get(user_id, {}).get('wishlist', [])
            
            if product_id in wishlist:
                wishlist_btn = types.InlineKeyboardButton(get_text("btn_remove_from_wishlist", user_id), callback_data=f"toggle_wishlist_{product_id}")
            else:
                wishlist_btn = types.InlineKeyboardButton(get_text("btn_add_to_wishlist", user_id), callback_data=f"toggle_wishlist_{product_id}")
            
            cart_btn = types.InlineKeyboardButton(get_text("btn_add_to_cart", user_id), callback_data=f"add_to_cart_{product['id']}")
            buy_now_btn = types.InlineKeyboardButton(get_text("btn_buy_now", user_id), callback_data=f"buy_now_{product['id']}")
            markup.add(wishlist_btn, cart_btn)
            markup.row(buy_now_btn)
            
            clean_description = strip_html_tags(product.get('description', ''))
            price_text = ""
            if discounted_product['discounted_price'] < discounted_product['price']:
                price_text = f"–¶—ñ–Ω–∞: <b>{discounted_product['discounted_price']} –≥—Ä–Ω</b> <s>{discounted_product['price']} –≥—Ä–Ω</s>"
            else:
                price_text = f"–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω"
            message_text = f"<b>{product['name']}</b>\n\n{price_text}\n\n{clean_description}"
            try:
                bot.send_photo(call.message.chat.id, product['image'], caption=message_text, reply_markup=markup, parse_mode="HTML")
            except telebot.apihelper.ApiTelegramException as e:
                logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product['name']}: {e}. –í—ñ–¥–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
                bot.send_message(call.message.chat.id, message_text, reply_markup=markup, parse_mode="HTML")
            bot.answer_callback_query(call.id)
        else:
            bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            bot.answer_callback_query(call.id, text="–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_product_details: {e}")
        bot.send_message(call.message.chat.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É.")
        bot.answer_callback_query(call.id, text="–ü–æ–º–∏–ª–∫–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_now_'))
@check_ban
def handle_buy_now(call):
    try:
        user_id = str(call.from_user.id)
        if user_id not in clients_db:
            bot.answer_callback_query(call.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å, –≤–≤—ñ–≤—à–∏ /start", show_alert=True)
            return

        product_id = call.data.split('buy_now_')[1]
        product = get_product_by_id(product_id)
        if not product:
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        discounts = db.get('discounts', [])
        discounted_product = apply_discounts([product], discounts)[0]
        price_to_use = discounted_product['discounted_price']

        order_items = [{"product_id": product_id, "product_name": product['name'], "price": price_to_use, "quantity": 1}]
        total_price = price_to_use
        order_name = product['name']

        ORDER_STATE[call.from_user.id] = {
            'step': 'waiting_for_promocode',
            'order_details': {
                "items": order_items,
                "totalPrice": total_price,
                "is_bundle": False,
                "order_name": order_name
            }
        }
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_promocode"))
        bot.send_message(call.from_user.id, "–£ –≤–∞—Å —î –ø—Ä–æ–º–æ–∫–æ–¥? –Ø–∫—â–æ —Ç–∞–∫, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ. –Ø–∫—â–æ –Ω—ñ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.", reply_markup=markup)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_buy_now: {e}")
        bot.send_message(call.from_user.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–∫—É–ø–∫–∏.")
        bot.answer_callback_query(call.id, text="–ü–æ–º–∏–ª–∫–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
@check_ban
def handle_buy_query(call):
    try:
        user_id = str(call.from_user.id)
        if user_id not in clients_db:
            bot.answer_callback_query(call.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å, –≤–≤—ñ–≤—à–∏ /start", show_alert=True)
            return
        
        order_items = []
        total_price = 0
        order_name = ""
        is_bundle = False
        discounts = db.get('discounts', [])
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –ø–æ–∫—É–ø–∫–∞ –∑ –∫–æ—à–∏–∫–∞, —á–∏ –æ–∫—Ä–µ–º–æ–≥–æ –±–∞–Ω–¥–ª–∞
        if call.data == 'buy_cart':
            cart = clients_db.get(user_id, {}).get('cart', [])
            if not cart:
                bot.answer_callback_query(call.id, "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", show_alert=True)
                return
            
            product_counts = Counter(cart)
            order_name_parts = []
            for pid, count in product_counts.items():
                product = get_product_by_id(pid)
                if product:
                    discounted_product = apply_discounts([product], discounts)[0]
                    price_to_use = discounted_product['discounted_price']
                    order_items.append({"product_id": pid, "product_name": product['name'], "price": price_to_use, "quantity": count})
                    total_price += price_to_use * count
                    order_name_parts.append(f"{product['name']} x{count}")
            order_name = ", ".join(order_name_parts)

        else: # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∞–Ω–¥–ª–∞
            parts = call.data.split('_')
            if len(parts) == 3 and parts[1] == 'bundle':
                item_id = parts[2]
                bundle = next((b for b in db.get('bundles', []) if b['id'] == item_id), None)
                if not bundle:
                    bot.answer_callback_query(call.id, "–ö–æ–ª–µ–∫—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                    return
                is_bundle = True
                order_name = f"–ö–æ–ª–µ–∫—Ü—ñ—è ¬´{bundle['name']}¬ª"
                total_price_before_bundle_discount = 0
                for pid in bundle['product_ids']:
                    product = get_product_by_id(pid)
                    if product:
                        discounted_product = apply_discounts([product], discounts)[0]
                        price_to_use = discounted_product['discounted_price']
                        order_items.append({"product_id": pid, "product_name": product['name'], "price": price_to_use, "quantity": 1})
                        total_price_before_bundle_discount += price_to_use
                if not order_items:
                    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä–∏ –∑ —Ü—ñ—î—ó –∫–æ–ª–µ–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                    return
                total_price = round(total_price_before_bundle_discount * (1 - bundle['discount_percentage'] / 100))
            else:
                logging.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback-–¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {call.data}")
                bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É.", show_alert=True)
                return

        ORDER_STATE[call.from_user.id] = {
            'step': 'waiting_for_promocode',
            'order_details': {
                "items": order_items,
                "totalPrice": total_price,
                "is_bundle": is_bundle,
                "order_name": order_name
            }
        }
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_promocode"))
        bot.send_message(call.from_user.id, "–£ –≤–∞—Å —î –ø—Ä–æ–º–æ–∫–æ–¥? –Ø–∫—â–æ —Ç–∞–∫, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ. –Ø–∫—â–æ –Ω—ñ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.", reply_markup=markup)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_buy_query: {e}")
        bot.send_message(call.from_user.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–∫—É–ø–∫–∏.")
        bot.answer_callback_query(call.id, text="–ü–æ–º–∏–ª–∫–∞")

def ask_about_bonuses(user_id, order_details):
    """–ó–∞–ø–∏—Ç—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —á–∏ —Ö–æ—á–µ –≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –±–æ–Ω—É—Å–∏."""
    str_user_id = str(user_id)
    user_points = clients_db.get(str_user_id, {}).get('loyalty_points', 0)

    if user_points > 0 and order_details['totalPrice'] > 0:
        ORDER_STATE[user_id] = {
            'step': 'waiting_for_bonus_decision',
            'order_details': order_details
        }
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(get_text("btn_yes", user_id), callback_data="use_bonus_yes"),
            types.InlineKeyboardButton(get_text("btn_no", user_id), callback_data="use_bonus_no")
        )
        bot.send_message(user_id, get_text("ask_use_bonus", user_id).format(points=user_points), reply_markup=markup)
    else:
        # –Ø–∫—â–æ –±–æ–Ω—É—Å—ñ–≤ –Ω–µ–º–∞—î –∞–±–æ —Å—É–º–∞ 0, –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó
        finalize_order(user_id, order_details)

def finalize_order(user_id, order_details):
    """–°—Ç–≤–æ—Ä—é—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –æ–ø–ª–∞—Ç—É."""
    client_info = clients_db[str(user_id)]
    order_id = str(uuid.uuid4())
    order = {
        "orderId": order_id, 
        "customer_name": f"{client_info.get('name', '')} {client_info.get('surname', '')}".strip(),
        "customer_phone": client_info.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'), 
        "date": datetime.datetime.now().isoformat(),
        "status": "–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏", 
        "telegram_id": user_id,
        **order_details
    }
    db['orders'].append(order)
    save_data(db)

    # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
    admin_message = (f"üì¶ <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id[:8]}</b>\n\n"
                     f"<b>–ö–ª—ñ—î–Ω—Ç:</b> {order['customer_name']}\n"
                     f"<b>–¢–æ–≤–∞—Ä–∏:</b>\n{order['order_name']}\n"
                     f"<b>–°—É–º–∞:</b> {order['totalPrice']} –≥—Ä–Ω")
    send_admin_notification(admin_message)
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    for key, details in payment_details.items():
        btn_text = f"–û–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ {details['account_name']}"
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"pay_{key}_{order_id}"))
    
    bot.send_message(user_id, f"<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id[:8]}</b> ({order['order_name']}) —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ.\n"
                             f"–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: <b>{order['totalPrice']} –≥—Ä–Ω</b>.\n\n"
                             f"–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=markup)
    # –û—á–∏—â—É—î–º–æ –∫–æ—à–∏–∫ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
    clients_db[str(user_id)]['cart'] = []
    save_clients(clients_db)

    if user_id in ORDER_STATE:
        del ORDER_STATE[user_id]

@bot.callback_query_handler(func=lambda call: call.data.startswith('use_bonus_'))
@check_ban
def handle_bonus_decision(call):
    user_id = call.from_user.id
    str_user_id = str(user_id)
    state = ORDER_STATE.get(user_id)

    if not state or state.get('step') != 'waiting_for_bonus_decision':
        bot.answer_callback_query(call.id)
        return

    order_details = state['order_details']
    bot.delete_message(call.message.chat.id, call.message.message_id)

    if call.data == 'use_bonus_yes':
        user_points = clients_db.get(str_user_id, {}).get('loyalty_points', 0)
        price = order_details['totalPrice']
        
        points_to_use = min(user_points, price)
        
        order_details['totalPrice'] -= points_to_use
        clients_db[str_user_id]['loyalty_points'] -= points_to_use
        save_clients(clients_db)
        
        bot.send_message(user_id, get_text("bonus_applied", user_id).format(
            new_price=order_details['totalPrice'],
            remaining_points=clients_db[str_user_id]['loyalty_points']
        ))

    finalize_order(user_id, order_details)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == 'skip_promocode')
@check_ban
def handle_skip_promocode(call):
    user_id = call.from_user.id
    state = ORDER_STATE.get(user_id)
    if state and state.get('step') == 'waiting_for_promocode':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        ask_about_bonuses(user_id, state['order_details'])
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_'))
@check_ban
def handle_payment_query(call):
    try:
        _, data = call.data.split('_', 1)
        payment_type, order_id = data.rsplit('_', 1)
        details = payment_details.get(payment_type)
        order = next((o for o in db['orders'] if o['orderId'] == order_id), None)
        if details and order:
            order['status'] = f"–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ ({details['account_name']})"
            save_data(db)
            message_text = f"<b>{details['account_name']}</b>\n\n" \
                           f"–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {order['totalPrice']} –≥—Ä–Ω.\n\n"
            if 'payment_link' in details and details['payment_link']:
                message_text += f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏: {details['payment_link']}\n\n"
            elif 'account_number' in details and details['account_number']:
                message_text += f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏: <code>{details['account_number']}</code>\n\n"
            message_text += f"<i>{details['instructions']}</i>"
            bot.send_message(call.from_user.id, message_text, parse_mode="HTML")
            bot.send_message(call.from_user.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç —á–µ–∫–∞ –ø—Ä–æ –æ–ø–ª–∞—Ç—É.")
            ORDER_STATE[call.from_user.id] = {'order_id': order_id, 'step': 'waiting_for_receipt'}
            bot.answer_callback_query(call.id)
        else:
            bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø–ª–∞—Ç–µ–∂—É –∞–±–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_payment_query: {e}")
        bot.answer_callback_query(call.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É.")

@bot.message_handler(content_types=['photo', 'document'], func=lambda message: message.from_user.id in ORDER_STATE and ORDER_STATE[message.from_user.id].get('step') == 'waiting_for_receipt')
@check_ban
def handle_receipt(message):
    user_id = message.from_user.id
    order_id = ORDER_STATE[user_id]['order_id']
    order = next((o for o in db['orders'] if o['orderId'] == order_id), None)
    if order:
        markup = types.InlineKeyboardMarkup()
        confirm_button = types.InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{order_id}")
        decline_button = types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"decline_payment_{order_id}")
        markup.add(confirm_button, decline_button)
        caption = (
            f"<b>–ù–û–í–ò–ô –ß–ï–ö</b>\n\n"
            f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id[:8]}\n"
            f"–ö–ª—ñ—î–Ω—Ç: {order['customer_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['customer_phone']}\n"
            f"–°—É–º–∞: {order['totalPrice']} –≥—Ä–Ω\n"
            f"–¢–æ–≤–∞—Ä: {order['order_name']}"
        )
        if message.content_type == 'photo':
            bot.send_photo(TELEGRAM_CHAT_ID, message.photo[-1].file_id, caption=caption, reply_markup=markup, parse_mode="HTML")
        elif message.content_type == 'document':
            bot.send_document(TELEGRAM_CHAT_ID, message.document.file_id, caption=caption, reply_markup=markup, parse_mode="HTML")
        bot.send_message(user_id, "–î—è–∫—É—é! –í–∞—à —á–µ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
        del ORDER_STATE[user_id]
    else:
        bot.send_message(user_id, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–æ–≤—É.")

# --- –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –±–æ–Ω—É—Å—ñ–≤ —Ç–∞ —Ä–∞–Ω–≥—ñ–≤ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_payment_') or call.data.startswith('decline_payment_'))
def handle_admin_payment_confirmation(call):
    if call.from_user.id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    try:
        action, _, order_id = call.data.partition('_payment_')
        order = next((o for o in db['orders'] if o['orderId'] == order_id), None)
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        user_telegram_id = order.get('telegram_id')
        if not user_telegram_id:
            bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ Telegram ID –∫–ª—ñ—î–Ω—Ç–∞.")
            return
        if action == 'decline':
            order['status'] = "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ"
            save_data(db)
            bot.send_message(user_telegram_id, f"‚ùå –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id[:8]} –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏.")
            bot.edit_message_caption(call.message.caption + "\n\n‚ùå –û–ø–ª–∞—Ç—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.", chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
            return
        
        final_message = ""
        if order.get('is_bundle'):
            final_message = get_text("bundle_purchase_success", user_telegram_id).format(name=order['order_name']) + "\n"
        else:
            final_message = f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id[:8]} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n"
        
        for item in order['items']:
            product = get_product_by_id(item.get('product_id'))
            if not product:
                continue
            content = product.get('content')
            if not content:
                bot.answer_callback_query(call.id, f"–ü–æ–º–∏–ª–∫–∞: –≤–º—ñ—Å—Ç –¥–ª—è —Ç–æ–≤–∞—Ä—É '{product['name']}' –Ω–µ –∑–∞–¥–∞–Ω–æ!", show_alert=True)
                return
            final_message += f"\n<b>{product['name']}</b>:\n<code>{content}</code>\n"
        
        bot.send_message(user_telegram_id, final_message)
        order['status'] = "–í–∏–∫–æ–Ω–∞–Ω–æ"
        
        client_id = str(user_telegram_id)
        if client_id in clients_db:
            # –û–Ω–æ–≤–ª—é—î–º–æ LTV
            clients_db[client_id]['ltv'] = clients_db[client_id].get('ltv', 0) + order['totalPrice']
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞ –Ω–æ–≤–∏–π —Ä–∞–Ω–≥
            current_rank = get_user_rank(clients_db[client_id].get('ltv', 0) - order['totalPrice'])
            new_rank = get_user_rank(clients_db[client_id]['ltv'])
            
            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å–∏ –∑–≥—ñ–¥–Ω–æ –∑ –Ω–æ–≤–∏–º —Ä–∞–Ω–≥–æ–º
            bonus_percent = new_rank['bonus_percent']
            bonus = round(order['totalPrice'] * (bonus_percent / 100))
            if bonus > 0:
                clients_db[client_id]['loyalty_points'] = clients_db[client_id].get('loyalty_points', 0) + bonus
                bot.send_message(user_telegram_id, f"üéâ –í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ <b>{bonus} Delon-–≥—ñ–∫—ñ–≤</b>! –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–∞ –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ.")
            
            # –°–ø–æ–≤—ñ—â–∞—î–º–æ –ø—Ä–æ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä–∞–Ω–≥—É
            if new_rank['name'] != current_rank['name']:
                clients_db[client_id]['rank'] = new_rank['name']
                bot.send_message(
                    user_telegram_id, 
                    get_text("rank_up_notification", user_telegram_id).format(
                        rank_name=new_rank['name'], 
                        bonus_percent=new_rank['bonus_percent']
                    )
                )
            
            save_clients(clients_db)

        save_data(db)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data=f"leave_review_{order_id}"))
        bot.send_message(user_telegram_id, "–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ë—É–¥–µ–º–æ –≤–¥—è—á–Ω—ñ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫.", reply_markup=markup)
        bot.edit_message_caption(call.message.caption + "\n\n‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –¢–æ–≤–∞—Ä(–∏) –≤–∏–¥–∞–Ω–æ.", chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä(–∏) —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–Ω–æ.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_admin_payment_confirmation: {e}")
        bot.answer_callback_query(call.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.")

# --- –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–Ω–≥—É ---
def get_user_rank(ltv):
    """–í–∏–∑–Ω–∞—á–∞—î —Ä–∞–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –π–æ–≥–æ LTV."""
    levels = sorted(db.get('loyalty_levels', []), key=lambda x: x['threshold'], reverse=True)
    for level in levels:
        if ltv >= level['threshold']:
            return level
    return {"name": "Newbie", "bonus_percent": 0} # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π —Ä–∞–Ω–≥, —è–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫

@bot.callback_query_handler(func=lambda call: call.data.startswith('leave_review_'))
@check_ban
def handle_leave_review_query(call):
    try:
        order_id = call.data.split('leave_review_')[1]
        order = next((o for o in db.get('orders', []) if o.get('orderId') == order_id), None)
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        ORDER_STATE[call.from_user.id] = {'step': 'waiting_for_rating', 'order_id': order_id}
        bot.send_message(call.from_user.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å –≤–∞—à—É –ø–æ–∫—É–ø–∫—É –≤—ñ–¥ 1 –¥–æ 5 ‚≠ê")
        bot.answer_callback_query(call.id)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_leave_review_query: {e}")
        bot.answer_callback_query(call.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith('reget_product_'))
@check_ban
def handle_reget_product(call):
    try:
        order_id = call.data.split('reget_product_')[1]
        order = next((o for o in db.get('orders', []) if o.get('orderId') == order_id), None)
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        final_message = f"–ü–æ–≤—Ç–æ—Ä–Ω–∞ –≤–∏–¥–∞—á–∞ —Ç–æ–≤–∞—Ä—É(—ñ–≤) —ñ–∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id[:8]}:\n"
        
        if not order.get('items'):
             bot.answer_callback_query(call.id, "–£ —Ü—å–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤–∏–¥–∞—á—ñ.", show_alert=True)
             return

        for item in order['items']:
            product = get_product_by_id(item.get('product_id'))
            if not product:
                final_message += f"\n<b>{item.get('product_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä')}</b>:\n<i>–¢–æ–≤–∞—Ä –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î.</i>\n"
                continue

            content = product.get('content')
            if not content:
                final_message += f"\n<b>{product['name']}</b>:\n<i>–í–º—ñ—Å—Ç —Ç–æ–≤–∞—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.</i>\n"
            else:
                final_message += f"\n<b>{product['name']}</b>:\n<code>{content}</code>\n"

        bot.send_message(call.from_user.id, final_message)
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä(–∏) –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_reget_product: {e}")
        bot.answer_callback_query(call.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.", show_alert=True)

def handle_order_flow(message):
    user_id = message.from_user.id
    str_user_id = str(user_id)
    state = ORDER_STATE.get(user_id)
    if not state: return
    try:
        step = state.get('step')
        if step == 'register_name':
            state['name_surname'] = message.text
            state['step'] = 'register_phone'
            bot.send_message(user_id, get_text("register_phone", user_id))
        elif step == 'register_phone':
            name_parts = state['name_surname'].split()
            name = name_parts[0]
            surname = name_parts[1] if len(name_parts) > 1 else ""
            referrer_id = state.get('referred_by')
            clients_db[str_user_id] = {
                "name": name, "surname": surname, "phone": message.text, "loyalty_points": 0,
                "lang": "uk", "wishlist": [], "cart": [], "is_banned": False, "referral_code": str_user_id,
                "referred_by": referrer_id, "referrals_count": 0, "registration_date": datetime.datetime.now().isoformat(),
                "ltv": 0, "rank": "Bronze"
            }
            success_message = get_text("register_success", user_id).format(name=name)
            if referrer_id:
                try:
                    bonus = db.get('bonus_settings', {}).get('referral_bonus', 20)
                    clients_db[referrer_id]['loyalty_points'] = clients_db[referrer_id].get('loyalty_points', 0) + bonus
                    clients_db[referrer_id]['referrals_count'] = clients_db[referrer_id].get('referrals_count', 0) + 1
                    bot.send_message(referrer_id, f"üéâ –í–∞—à –¥—Ä—É–≥ {name} –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è! –í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {bonus} Delon-–≥—ñ–∫—ñ–≤.")
                    success_message += get_text("referral_welcome", user_id)
                except Exception as e:
                    logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –±–æ–Ω—É—Å –¥–ª—è {referrer_id}: {e}")
            save_clients(clients_db)
            bot.send_message(user_id, success_message)
            show_main_menu(user_id)
            del ORDER_STATE[user_id]
        elif step == 'waiting_for_promocode':
            code = message.text.upper()
            promocode = next((p for p in db.get('promocodes', []) if p['code'] == code and p.get('uses_left', 1) > 0), None)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥—É
            if promocode and promocode.get('user_id') and promocode.get('user_id') != str_user_id:
                promocode = None # –¶–µ –Ω–µ –π–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥

            if promocode:
                discount = promocode['discount_percentage']
                state['order_details']['totalPrice'] = round(state['order_details']['totalPrice'] * (1 - discount / 100))
                if 'uses_left' in promocode:
                    promocode['uses_left'] -= 1
                    if promocode['uses_left'] == 0:
                        db['promocodes'] = [p for p in db['promocodes'] if p['id'] != promocode['id']]
                save_data(db)
                bot.send_message(user_id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{code}' –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ! –í–∞—à–∞ –Ω–æ–≤–∞ —Å—É–º–∞: {state['order_details']['totalPrice']} –≥—Ä–Ω.")
            else:
                bot.send_message(user_id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ —Ç–µ—Ä–º—ñ–Ω –π–æ–≥–æ –¥—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è.")
            # –ü—ñ—Å–ª—è –ø—Ä–æ–º–æ–∫–æ–¥—É –∑–∞–ø–∏—Ç—É—î–º–æ –ø—Ä–æ –±–æ–Ω—É—Å–∏
            ask_about_bonuses(user_id, state['order_details'])
        elif step == 'waiting_for_new_name':
            name_parts = message.text.split()
            clients_db[str_user_id]['name'] = name_parts[0]
            clients_db[str_user_id]['surname'] = name_parts[1] if len(name_parts) > 1 else ""
            save_clients(clients_db)
            bot.send_message(user_id, get_text("name_changed", user_id))
            del ORDER_STATE[user_id]
        elif step == 'waiting_for_new_phone':
            clients_db[str_user_id]['phone'] = message.text
            save_clients(clients_db)
            bot.send_message(user_id, get_text("phone_changed", user_id))
            del ORDER_STATE[user_id]
        elif step == 'waiting_for_rating':
            try:
                rating = int(message.text)
                if 1 <= rating <= 5:
                    state['rating'] = rating
                    state['step'] = 'waiting_for_comment'
                    bot.send_message(user_id, "–î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä.")
                else:
                    bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 5.")
            except ValueError:
                bot.send_message(user_id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 5.")
        elif step == 'waiting_for_comment':
            comment = message.text
            order_id = state.get('order_id')
            rating = state.get('rating')
            order = next((o for o in db.get('orders', []) if o.get('orderId') == order_id), None)
            client_info = clients_db.get(str_user_id)
            if order and client_info:
                product_name_for_review = order.get('order_name', 'N/A')
                product_id_for_review = order['items'][0]['product_id'] if order['items'] else None
                review_data = {
                    "product_id": product_id_for_review, "product_name": product_name_for_review,
                    "user_id": user_id, "username": f"{client_info.get('name')} {client_info.get('surname')}",
                    "rating": rating, "comment": comment
                }
                try:
                    response = requests.post(f'http://127.0.0.1:5000/api/reviews', json=review_data)
                    if response.status_code == 201:
                        bot.send_message(user_id, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! –í—ñ–Ω –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∏–π –¥–ª—è –Ω–∞—Å.")
                    else:
                        bot.send_message(user_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≤–∞—à –≤—ñ–¥–≥—É–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–≥—É–∫—É —á–µ—Ä–µ–∑ API: {e}")
                    bot.send_message(user_id, "–°—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            else:
                bot.send_message(user_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–≥—É–∫—É.")
            del ORDER_STATE[user_id]
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_order_flow: {e}")
        bot.send_message(message.chat.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

def show_my_purchases(message):
    try:
        user_id = str(message.from_user.id)
        user_orders = [o for o in db.get('orders', []) if str(o.get('telegram_id')) == user_id and o.get('status') == '–í–∏–∫–æ–Ω–∞–Ω–æ']
        if not user_orders:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫.")
            return
        
        bot.send_message(message.chat.id, "<b>üîë –í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –ø–æ–∫—É–ø–æ–∫:</b>")
        for order in sorted(user_orders, key=lambda x: x['date'], reverse=True)[:5]:
            order_id = order.get('orderId')
            date = datetime.datetime.fromisoformat(order.get('date')).strftime('%d.%m.%Y %H:%M')
            
            items_text = ""
            for item in order.get('items', []):
                items_text += f"‚Ä¢ {item['product_name']} (x{item.get('quantity', 1)}) - {item['price']} –≥—Ä–Ω\n"

            response = (f"<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id[:8]} –≤—ñ–¥ {date}</b>\n\n"
                        f"<b>–°–∫–ª–∞–¥:</b>\n{items_text}\n"
                        f"<b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {order['totalPrice']} –≥—Ä–Ω</b>")
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–≤–∞—Ä(–∏)", callback_data=f"reget_product_{order_id}"))
            bot.send_message(message.chat.id, response, reply_markup=markup)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ '–ú–æ—ó –ø–æ–∫—É–ø–∫–∏': {e}")
        bot.send_message(message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–∫—É–ø–æ–∫.")

def show_promotions(message):
    try:
        discounts = db.get('discounts', [])
        if not discounts:
            bot.send_message(message.chat.id, "–ù–∞—Ä–∞–∑—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫—Ü—ñ–π –Ω–µ–º–∞—î.")
            return
        response = "<b>üî• –ê–∫—Ç–∏–≤–Ω—ñ –∞–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏:</b>\n\n"
        for discount in discounts:
            percentage = discount.get('percentage', 0)
            target = discount.get('target', 'all')
            response += f"<b>- {percentage}% –Ω–∞:</b> "
            if target == 'all':
                response += "–≤—Å—ñ —Ç–æ–≤–∞—Ä–∏!\n"
            elif target == 'specific':
                product_ids = discount.get('product_ids', [])
                product_names = [p.get('name') for p in db.get('products', []) if p.get('id') in product_ids]
                if product_names:
                    response += f"{', '.join(product_names)}\n"
                else:
                    response += "–æ–∫—Ä–µ–º—ñ —Ç–æ–≤–∞—Ä–∏ (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ).\n"
        bot.send_message(message.chat.id, response)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ '–ê–∫—Ü—ñ—ó': {e}")
        bot.send_message(message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫—Ü—ñ—ó.")

def show_reviews(message):
    try:
        approved_reviews = [r for r in db.get('reviews', []) if r.get('approved')]
        if not approved_reviews:
            bot.send_message(message.chat.id, "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –≤—ñ–¥–≥—É–∫—É.")
            return
        response = "<b>–û—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫–∏ –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:</b>\n\n"
        for review in sorted(approved_reviews, key=lambda x: x['date'], reverse=True)[:5]:
            product_name = review.get('product_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä')
            rating_stars = '‚≠ê' * review.get('rating', 0)
            username = review.get('username', '–ê–Ω–æ–Ω—ñ–º')
            comment = review.get('comment', '')
            date = datetime.datetime.fromisoformat(review.get('date')).strftime('%d.%m.%Y')
            response += f"<b>{product_name}</b>\n{rating_stars} –≤—ñ–¥ {username} ({date})\n<i>¬´{comment}¬ª</i>\n\n"
        bot.send_message(message.chat.id, response)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ '–í—ñ–¥–≥—É–∫–∏': {e}")
        bot.send_message(message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–≥—É–∫–∏.")

def show_profile(message):
    user_id = str(message.from_user.id)
    if user_id in clients_db:
        client = clients_db[user_id]
        rank = get_user_rank(client.get('ltv', 0))
        rank_text = get_text("profile_rank", user_id).format(rank_name=rank['name'], bonus_percent=rank['bonus_percent'])
        
        response = (f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
                    f"<b>–Ü–º'—è:</b> {client.get('name', '')} {client.get('surname', '')}\n"
                    f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {client.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n\n"
                    f"{rank_text}\n"
                    f"<b>üí∞ –ë–æ–Ω—É—Å–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b>\n{client.get('loyalty_points', 0)} Delon-–≥—ñ–∫—ñ–≤")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(get_text("btn_invite", user_id), callback_data="invite_friend"))
        bot.send_message(message.chat.id, response, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")

@bot.callback_query_handler(func=lambda call: call.data == 'invite_friend')
@check_ban
def handle_invite_friend(call):
    user_id = call.from_user.id
    try:
        bot_username = bot.get_me().username
        referral_link = f"https://t.me/{bot_username}?start={user_id}"
        bonus = db.get('bonus_settings', {}).get('referral_bonus', 20)
        bot.send_message(user_id, get_text("referral_text", user_id).format(link=referral_link, bonus=bonus))
        bot.answer_callback_query(call.id)
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {e}")
        bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è.", show_alert=True)

def show_news(message):
    news = db.get('news', [])
    if not news:
        bot.send_message(message.chat.id, get_text("no_news", message.from_user.id))
        return
    bot.send_message(message.chat.id, get_text("news_title", message.from_user.id))
    for item in sorted(news, key=lambda x: x.get('created_at', '1970-01-01'), reverse=True)[:5]:
        caption = f"<i>üóì {datetime.datetime.fromisoformat(item['created_at']).strftime('%d.%m.%Y')}</i>\n{item['text']}"
        try:
            if item.get('photo_id'):
                bot.send_photo(message.chat.id, item['photo_id'], caption=caption)
            elif item.get('document_id'):
                bot.send_document(message.chat.id, item['document_id'], caption=caption)
            else:
                bot.send_message(message.chat.id, caption)
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É {item.get('id')}: {e}")
            bot.send_message(message.chat.id, caption)

def search_products(query):
    query_words = set(re.split(r'\s+', query.lower()))
    found_products = []
    for product in db.get('products', []):
        product_name_words = set(re.split(r'\s+', product.get('name', '').lower()))
        if query_words.intersection(product_name_words):
            found_products.append(product)
    return found_products

def show_settings_menu(message):
    user_id = message.from_user.id
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(get_text("btn_change_name", user_id), callback_data="setting_change_name"),
        types.InlineKeyboardButton(get_text("btn_change_phone", user_id), callback_data="setting_change_phone"),
        types.InlineKeyboardButton(get_text("btn_language", user_id), callback_data="setting_language")
    )
    bot.send_message(message.chat.id, get_text("settings_menu", user_id), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('setting_'))
@check_ban
def handle_settings_query(call):
    user_id = call.from_user.id
    action = call.data
    if action == "setting_language":
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="set_lang_uk"),
            types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru"),
            types.InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en")
        )
        bot.edit_message_text(get_text("language_menu", user_id), call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif action == "setting_change_name":
        ORDER_STATE[user_id] = {'step': 'waiting_for_new_name'}
        bot.send_message(user_id, get_text("ask_new_name", user_id))
        bot.answer_callback_query(call.id)
    elif action == "setting_change_phone":
        ORDER_STATE[user_id] = {'step': 'waiting_for_new_phone'}
        bot.send_message(user_id, get_text("ask_new_phone", user_id))
        bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('set_lang_'))
@check_ban
def handle_set_language(call):
    user_id = str(call.from_user.id)
    lang_code = call.data.split('_')[-1]
    if user_id in clients_db:
        clients_db[user_id]['lang'] = lang_code
        save_clients(clients_db)
        bot.answer_callback_query(call.id, get_text("lang_set_success", user_id))
        show_main_menu(call.from_user.id)
        bot.delete_message(call.message.chat.id, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "Error: User not found.", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_wishlist_'))
@check_ban
def handle_wishlist_toggle(call):
    user_id = str(call.from_user.id)
    product_id = call.data.split('toggle_wishlist_')[1]
    if user_id not in clients_db:
        bot.answer_callback_query(call.id, "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.", show_alert=True)
        return
    if 'wishlist' not in clients_db[user_id]:
        clients_db[user_id]['wishlist'] = []
    wishlist = clients_db[user_id]['wishlist']
    if product_id in wishlist:
        wishlist.remove(product_id)
        alert_text = get_text("removed_from_wishlist", user_id)
    else:
        wishlist.append(product_id)
        alert_text = get_text("added_to_wishlist", user_id)
    save_clients(clients_db)
    bot.answer_callback_query(call.id, text=alert_text)
    product = get_product_by_id(product_id)
    if product:
        markup = types.InlineKeyboardMarkup(row_width=2)
        if product_id in clients_db[user_id]['wishlist']:
            wishlist_btn = types.InlineKeyboardButton(get_text("btn_remove_from_wishlist", user_id), callback_data=f"toggle_wishlist_{product_id}")
        else:
            wishlist_btn = types.InlineKeyboardButton(get_text("btn_add_to_wishlist", user_id), callback_data=f"toggle_wishlist_{product_id}")
        cart_btn = types.InlineKeyboardButton(get_text("btn_add_to_cart", user_id), callback_data=f"add_to_cart_{product['id']}")
        markup.add(wishlist_btn, cart_btn)
        try:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫—É —É–ª—é–±–ª–µ–Ω–æ–≥–æ: {e}")

def show_wishlist(message):
    user_id = str(message.from_user.id)
    wishlist_ids = clients_db.get(user_id, {}).get('wishlist', [])
    if not wishlist_ids:
        bot.send_message(message.chat.id, get_text("wishlist_empty", user_id))
        return
    bot.send_message(message.chat.id, get_text("wishlist_title", user_id))
    for product_id in wishlist_ids:
        product = get_product_by_id(product_id)
        if product:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data=f"show_product_{product['id']}"))
            bot.send_message(message.chat.id, f"<b>{product['name']}</b>\n–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω", reply_markup=markup)

def show_bundles(message):
    user_id = message.from_user.id
    bundles = db.get('bundles', [])
    if not bundles:
        bot.send_message(user_id, get_text("bundles_empty", user_id))
        return
    bot.send_message(user_id, get_text("bundles_title", user_id))
    for bundle in bundles:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data=f"bundle_{bundle['id']}"))
        bot.send_message(user_id, f"<b>{bundle['name']}</b>", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('bundle_'))
@check_ban
def handle_bundle_details(call):
    user_id = call.from_user.id
    bundle_id = call.data.split('_')[1]
    bundle = next((b for b in db.get('bundles', []) if b['id'] == bundle_id), None)
    if not bundle:
        bot.answer_callback_query(call.id, "–ö–æ–ª–µ–∫—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    total_price = 0
    products_list_text = ""
    for pid in bundle['product_ids']:
        product = get_product_by_id(pid)
        if product:
            products_list_text += f"‚Ä¢ {product['name']} ({product['price']} –≥—Ä–Ω)\n"
            total_price += product['price']
    discount_price = round(total_price * (1 - bundle['discount_percentage'] / 100))
    text = get_text("bundle_details", user_id).format(
        name=bundle['name'], description=bundle.get('description', ''),
        products=products_list_text, total_price=total_price, discount_price=discount_price
    )
    markup = types.InlineKeyboardMarkup()
    buy_text = get_text("buy_bundle", user_id).format(price=discount_price)
    markup.add(types.InlineKeyboardButton(buy_text, callback_data=f"buy_bundle_{bundle_id}"))
    bot.send_message(user_id, text, reply_markup=markup)
    bot.answer_callback_query(call.id)

# --- –ù–û–í–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ö–û–®–ò–ö–ê ---
def show_cart(message):
    user_id = str(message.from_user.id)
    cart_ids = clients_db.get(user_id, {}).get('cart', [])
    
    if not cart_ids:
        bot.send_message(message.chat.id, get_text("cart_empty", user_id))
        return

    text = get_text("cart_title", user_id) + "\n\n"
    total_price = 0
    product_counts = Counter(cart_ids)
    discounts = db.get('discounts', [])

    for product_id, count in product_counts.items():
        product = get_product_by_id(product_id)
        if product:
            discounted_product = apply_discounts([product], discounts)[0]
            price_to_use = discounted_product['discounted_price']
            total_price += price_to_use * count
            text += f"‚Ä¢ {product['name']} x{count} - {price_to_use * count} –≥—Ä–Ω\n"

    text += f"\n{get_text('total_price', user_id)} {total_price} –≥—Ä–Ω"
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(get_text("btn_clear_cart", user_id), callback_data="clear_cart"),
        types.InlineKeyboardButton(get_text("btn_checkout", user_id), callback_data="buy_cart")
    )
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_to_cart_'))
@check_ban
def handle_add_to_cart(call):
    user_id = str(call.from_user.id)
    product_id = call.data.split('add_to_cart_')[1]

    if user_id not in clients_db:
        bot.answer_callback_query(call.id, "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.", show_alert=True)
        return
        
    if 'cart' not in clients_db[user_id]:
        clients_db[user_id]['cart'] = []
        
    clients_db[user_id]['cart'].append(product_id)
    save_clients(clients_db)
    bot.answer_callback_query(call.id, text=get_text("added_to_cart", user_id))

@bot.callback_query_handler(func=lambda call: call.data == 'clear_cart')
@check_ban
def handle_clear_cart(call):
    user_id = str(call.from_user.id)
    if user_id in clients_db:
        clients_db[user_id]['cart'] = []
        save_clients(clients_db)
        bot.edit_message_text(get_text("cart_empty", user_id), call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id, "–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")
# --- –ö–Ü–ù–ï–¶–¨ –ù–û–í–ò–• –§–£–ù–ö–¶–Ü–ô ---

@bot.message_handler(commands=['news'])
def admin_add_news(message):
    if message.from_user.id not in ADMIN_IDS: return
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /news <—Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏>")
        return
    new_item = {"id": str(uuid.uuid4()), "text": text[1], "created_at": datetime.datetime.now().isoformat()}
    db['news'].append(new_item)
    save_data(db)
    bot.reply_to(message, "‚úÖ –ù–æ–≤–∏–Ω—É –¥–æ–¥–∞–Ω–æ.")

@bot.message_handler(commands=['post'])
def admin_broadcast(message):
    if message.from_user.id not in ADMIN_IDS: return
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /post <—Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏>")
        return
    broadcast_thread = Thread(target=send_broadcast_message, args=(text[1], message.chat.id, None, None))
    broadcast_thread.start()

def send_broadcast_message(message_text, admin_chat_id, photo_id=None, document_id=None):
    success_count = 0
    fail_count = 0
    bot.send_message(admin_chat_id, f"üöÄ –ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É...")
    for user_id in clients_db.keys():
        if not clients_db[user_id].get('is_banned', False):
            try:
                if photo_id:
                    bot.send_photo(user_id, photo_id, caption=message_text, parse_mode="HTML")
                elif document_id:
                    bot.send_document(user_id, document_id, caption=message_text, parse_mode="HTML")
                elif message_text:
                    bot.send_message(user_id, message_text, parse_mode="HTML")
                success_count += 1
                time.sleep(0.1)
            except Exception as e:
                logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
                fail_count += 1
    bot.send_message(admin_chat_id, f"üèÅ –†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success_count}\n‚ùå –ü–æ–º–∏–ª–æ–∫: {fail_count}")

def show_deal_of_the_day(message):
    user_id = str(message.from_user.id)
    deal = db.get("deal_of_the_day", {})
    if not deal or not deal.get("product_id"):
        bot.send_message(message.chat.id, get_text("no_deal_of_the_day", user_id))
        return

    product = get_product_by_id(deal["product_id"])
    if not product:
        bot.send_message(message.chat.id, get_text("no_deal_of_the_day", user_id))
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –∞–∫—Ü—ñ—ó
    if 'end_date' in deal and deal['end_date']:
        try:
            end_date = datetime.datetime.fromisoformat(deal['end_date'])
            if datetime.datetime.now() > end_date:
                bot.send_message(message.chat.id, get_text("no_deal_of_the_day", user_id))
                # –û—á–∏—Å—Ç–∏—Ç–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—É –∞–∫—Ü—ñ—é
                db['deal_of_the_day'] = {}
                save_data(db)
                return
        except (ValueError, TypeError):
            pass # –Ø–∫—â–æ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞, —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É

    discount_percentage = deal.get("discount_percentage", 0)
    discounted_price = round(product['price'] * (1 - discount_percentage / 100))

    text = get_text("deal_of_the_day_title", user_id) + "\n\n"
    text += f"<b>{product['name']}</b>\n\n"
    text += f"–ó–≤–∏—á–∞–π–Ω–∞ —Ü—ñ–Ω–∞: <s>{product['price']} –≥—Ä–Ω</s>\n"
    text += f"üî• <b>–¶—ñ–Ω–∞ –¥–Ω—è: {discounted_price} –≥—Ä–Ω!</b> üî•"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data=f"show_product_{product['id']}"))
    
    try:
        bot.send_photo(message.chat.id, product['image'], caption=text, reply_markup=markup)
    except Exception:
        bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.message_handler(func=lambda message: True)
@check_ban
def handle_text_messages(message):
    try:
        user_id = message.from_user.id
        state = ORDER_STATE.get(user_id)

        # --- –ù–û–í–ê –õ–û–ì–Ü–ö–ê –ü–Ü–î–¢–†–ò–ú–ö–ò ---
        if state and state.get('step') == 'in_support_chat':
            if message.text == get_text("btn_end_chat", user_id):
                del ORDER_STATE[user_id]
                bot.send_message(user_id, get_text("support_end", user_id))
                show_main_menu(user_id)
            else:
                bot.forward_message(TELEGRAM_CHAT_ID, from_chat_id=user_id, message_id=message.message_id)
            return
        
        if user_id in ADMIN_IDS and message.reply_to_message and message.reply_to_message.forward_from:
            original_user_id = message.reply_to_message.forward_from.id
            bot.send_message(original_user_id, f"<b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}")
            return
        # --- –ö–Ü–ù–ï–¶–¨ –ù–û–í–û–á –õ–û–ì–Ü–ö–ò –ü–Ü–î–¢–†–ò–ú–ö–ò ---

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ –º–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        btn_catalog_text = get_text("btn_catalog", user_id)
        btn_cart_text = get_text("btn_cart", user_id)
        btn_purchases_text = get_text("btn_purchases", user_id)
        btn_support_text = get_text("btn_support", user_id)
        btn_promotions_text = get_text("btn_promotions", user_id)
        btn_about_text = get_text("btn_about", user_id)
        btn_reviews_text = get_text("btn_reviews", user_id)
        btn_profile_text = get_text("btn_profile", user_id)
        btn_settings_text = get_text("btn_settings", user_id)
        btn_wishlist_text = get_text("btn_wishlist", user_id)
        btn_bundles_text = get_text("btn_bundles", user_id)
        btn_news_text = get_text("btn_news", user_id)
        btn_deal_of_the_day_text = get_text("btn_deal_of_the_day", user_id)

        if state and message.text not in [btn_catalog_text, btn_cart_text, btn_purchases_text, btn_support_text, btn_promotions_text, btn_about_text, btn_reviews_text, btn_profile_text, btn_settings_text, btn_wishlist_text, btn_bundles_text, btn_news_text, btn_deal_of_the_day_text]:
            handle_order_flow(message)
            return

        if message.text == btn_catalog_text:
            text = get_text("catalog_title", user_id)
            markup = get_categories_markup(user_id)
            bot.send_message(message.chat.id, text, reply_markup=markup)
            return

        if message.text == btn_cart_text:
            show_cart(message)
            return

        if message.text == btn_settings_text:
            show_settings_menu(message)
            return
        
        if message.text == btn_wishlist_text:
            show_wishlist(message)
            return
            
        if message.text == btn_bundles_text:
            show_bundles(message)
            return
            
        if message.text == btn_news_text:
            show_news(message)
            return

        if message.text == btn_purchases_text:
            show_my_purchases(message)
            return

        if message.text == btn_support_text:
            ORDER_STATE[user_id] = {'step': 'in_support_chat'}
            support_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            support_markup.add(types.KeyboardButton(get_text("btn_end_chat", user_id)))
            bot.send_message(user_id, get_text("support_start", user_id), reply_markup=support_markup)
            return

        if message.text == btn_promotions_text:
            show_promotions(message)
            return

        if message.text == btn_about_text:
            shop_info = db.get("shop_info", {})
            bot.send_message(message.chat.id, f"<b>{shop_info.get('name', '–ù–∞—à –º–∞–≥–∞–∑–∏–Ω')}</b>\n\n{shop_info.get('description', '–ú–∏ –Ω–∞–π–∫—Ä–∞—â—ñ!')}")
            return

        if message.text == btn_reviews_text:
            show_reviews(message)
            return

        if message.text == btn_profile_text:
            show_profile(message)
            return
            
        if message.text == btn_deal_of_the_day_text:
            show_deal_of_the_day(message)
            return

        found_products = search_products(message.text)
        if found_products:
            bot.send_message(message.chat.id, "üîé –ú–æ–∂–ª–∏–≤–æ, –≤–∏ —à—É–∫–∞–ª–∏:")
            for product in found_products[:3]:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", callback_data=f"show_product_{product['id']}"))
                bot.send_message(message.chat.id, f"<b>{product['name']}</b>\n–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω", reply_markup=markup)
            return

        for entry in chatbot_knowledge:
            keywords_list = [kw.strip().lower() for kw in entry.get('keywords', '').split(',')]
            if any(kw in message.text.lower() for kw in keywords_list):
                bot.send_message(message.chat.id, entry.get('response', '...'))
                return
        
        if not (message.from_user.id in ADMIN_IDS and message.reply_to_message):
            bot.send_message(message.chat.id, "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –∫–æ–º–∞–Ω–¥—É /start.")

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_text_messages: {e}")
        bot.send_message(message.chat.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

# --- –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ (–∑–∞–≤–∂–¥–∏ –≤ –∫—ñ–Ω—Ü—ñ) ---
@app.route("/<path:filename>")
def serve_files(filename):
    return send_from_directory('.', filename)

# -----------------
# –ó–∞–ø—É—Å–∫ Flask —Ç–∞ –±–æ—Ç–∞
# -----------------
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    if bot:
        def run_bot_polling():
            while True:
                try:
                    logging.info("Telegram bot polling started...")
                    bot.infinity_polling(timeout=10, long_polling_timeout=5)
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ... {e}")
                    time.sleep(5)
        bot_thread = Thread(target=run_bot_polling, daemon=True)
        bot_thread.start()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask-–¥–æ–¥–∞—Ç–æ–∫
    logging.info("===================================================================")
    logging.info(f" * –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ –ª–æ–∫–∞–ª—å–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é: http://127.0.0.1:5000/admin.html")
    logging.info("===================================================================")
    app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)
